{"ast":null,"code":"var _jsxFileName = \"/Users/kenneth/repos/MTSaaSRepo/mtsaas/src/templatesTable.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { lightBlue } from \"@material-ui/core/colors\"; //makes sure that one box doesnt check everything\n\nlet counter = 0;\n\nfunction createData(template, showsForTherapist, dateCreated) {\n  counter += 1; //removing \"id:counter\" also makes sure that one box doesnt check everything\n\n  return {\n    id: counter,\n    template,\n    showsForTherapist,\n    dateCreated\n  };\n}\n\nconst rows = [{\n  id: \"Template\",\n  disablePadding: false,\n  label: \"Template\"\n}, {\n  id: \"Shows for Therapist\",\n  disablePadding: false,\n  label: \"Shows for Therapist\"\n}, {\n  id: \"Date Created\",\n  disablePadding: false,\n  label: \"Date Created\"\n}];\n\nclass EnhancedTableHead extends React.Component {\n  render() {\n    const _this$props = this.props,\n          onSelectAllClick = _this$props.onSelectAllClick,\n          numSelected = _this$props.numSelected,\n          rowCount = _this$props.rowCount;\n    return React.createElement(TableHead, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(TableRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(CustomTableCell, {\n      padding: \"checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Checkbox // shows the \"intermediate\" symbol instead of everything symbol\n    , {\n      indeterminate: numSelected > 0 && numSelected < rowCount,\n      checked: numSelected === rowCount //selects all\n      ,\n      onChange: onSelectAllClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    })), rows.map(row => React.createElement(CustomTableCell, {\n      key: row.id,\n      align: row.numeric ? \"right\" : \"left\",\n      padding: row.disablePadding ? \"none\" : \"default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, row.label), this)));\n  }\n\n}\n\nconst styles = theme => ({\n  root: {\n    width: \"500\",\n    marginTop: theme.spacing.unit * 2,\n    marginLeft: theme.spacing.unit * 1,\n    overflowX: \"auto\"\n  },\n  table: {//minWidth: 500\n  },\n  row: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.background.default\n    }\n  }\n});\n\nconst CustomTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: lightBlue[400],\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\n\nclass EnhancedTable extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selected: [],\n      data: [createData(\"SOAP Note\", \"Yes\", \"1/4/2015\", \"2/1/2019 to 3/1/2019\", \"$60\"), createData(\"Narrative\", \"No\", \"4/25/2016\"), createData(\"Rating Schedule +\", \"Yes\", \"3/20/2015\")]\n    };\n\n    this.handleSelectAllClick = event => {\n      if (event.target.checked) {\n        this.setState(state => ({\n          selected: state.data.map(n => n.id)\n        }));\n        return;\n      }\n\n      this.setState({\n        selected: []\n      });\n    };\n\n    this.handleClick = (event, id) => {\n      const selected = this.state.selected;\n      const selectedIndex = selected.indexOf(id);\n      let newSelected = []; //this allows selected boxes to be checked\n\n      if (selectedIndex === -1) {\n        newSelected = newSelected.concat(selected, id);\n      } else if (selectedIndex === 0) {\n        newSelected = newSelected.concat(selected.slice(1));\n      } else if (selectedIndex === selected.length - 1) {\n        newSelected = newSelected.concat(selected.slice(0, -1));\n      } else if (selectedIndex > 0) {\n        newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n      } //also makes sure selected boxes to be checkd\n\n\n      this.setState({\n        selected: newSelected\n      });\n    };\n\n    this.isSelected = id => this.state.selected.indexOf(id) !== -1;\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const _this$state = this.state,\n          data = _this$state.data,\n          selected = _this$state.selected;\n    return React.createElement(Paper, {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.tableWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(Table, {\n      className: classes.table,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(EnhancedTableHead, {\n      numSelected: selected.length,\n      onSelectAllClick: this.handleSelectAllClick,\n      rowCount: data.length,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(TableBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, data.map(n => {\n      const isSelected = this.isSelected(n.id);\n      return React.createElement(TableRow, {\n        className: classes.row,\n        hover: true,\n        onClick: event => this.handleClick(event, n.id) //role=\"checkbox\"\n        //aria-checked={isSelected}\n        ,\n        tabIndex: -1,\n        key: n.id,\n        selected: isSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        padding: \"checkbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        checked: isSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      })), React.createElement(TableCell, {\n        aligh: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, n.template), React.createElement(TableCell, {\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, n.showsForTherapist), React.createElement(TableCell, {\n        align: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, n.dateCreated));\n    })))));\n  }\n\n}\n\nEnhancedTable.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(EnhancedTable);","map":{"version":3,"sources":["/Users/kenneth/repos/MTSaaSRepo/mtsaas/src/templatesTable.js"],"names":["React","PropTypes","withStyles","Table","TableBody","TableCell","TableHead","TableRow","Paper","Checkbox","lightBlue","counter","createData","template","showsForTherapist","dateCreated","id","rows","disablePadding","label","EnhancedTableHead","Component","render","props","onSelectAllClick","numSelected","rowCount","map","row","numeric","styles","theme","root","width","marginTop","spacing","unit","marginLeft","overflowX","table","backgroundColor","palette","background","default","CustomTableCell","head","color","common","white","body","fontSize","EnhancedTable","state","selected","data","handleSelectAllClick","event","target","checked","setState","n","handleClick","selectedIndex","indexOf","newSelected","concat","slice","length","isSelected","classes","tableWrapper","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { lightBlue } from \"@material-ui/core/colors\";\n\n//makes sure that one box doesnt check everything\nlet counter = 0;\nfunction createData(template, showsForTherapist, dateCreated) {\n  counter += 1;\n  //removing \"id:counter\" also makes sure that one box doesnt check everything\n  return {\n    id: counter,\n    template,\n    showsForTherapist,\n    dateCreated\n  };\n}\n\nconst rows = [\n  { id: \"Template\", disablePadding: false, label: \"Template\" },\n  {\n    id: \"Shows for Therapist\",\n    disablePadding: false,\n    label: \"Shows for Therapist\"\n  },\n  { id: \"Date Created\", disablePadding: false, label: \"Date Created\" }\n];\n\nclass EnhancedTableHead extends React.Component {\n  render() {\n    const { onSelectAllClick, numSelected, rowCount } = this.props;\n\n    return (\n      <TableHead>\n        <TableRow>\n          {/* Start of top Table cell with check box*/}\n          <CustomTableCell padding=\"checkbox\">\n            <Checkbox\n              // shows the \"intermediate\" symbol instead of everything symbol\n              indeterminate={numSelected > 0 && numSelected < rowCount}\n              checked={numSelected === rowCount}\n              //selects all\n              onChange={onSelectAllClick}\n            />\n          </CustomTableCell>\n          {/*end of top table cell with check box*/}\n          {/* not needed START*/}\n          {rows.map(\n            row => (\n              <CustomTableCell\n                key={row.id}\n                align={row.numeric ? \"right\" : \"left\"}\n                padding={row.disablePadding ? \"none\" : \"default\"}\n              >\n                {row.label}\n              </CustomTableCell>\n            ),\n            this\n          )}\n          {/* not needed END*/}\n        </TableRow>\n      </TableHead>\n    );\n  }\n}\n\nconst styles = theme => ({\n  root: {\n    width: \"500\",\n    marginTop: theme.spacing.unit * 2,\n    marginLeft: theme.spacing.unit * 1,\n    overflowX: \"auto\"\n  },\n  table: {\n    //minWidth: 500\n  },\n  row: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.background.default\n    }\n  }\n});\nconst CustomTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: lightBlue[400],\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\n\nclass EnhancedTable extends React.Component {\n  state = {\n    selected: [],\n    data: [\n      createData(\"SOAP Note\", \"Yes\", \"1/4/2015\", \"2/1/2019 to 3/1/2019\", \"$60\"),\n      createData(\"Narrative\", \"No\", \"4/25/2016\"),\n      createData(\"Rating Schedule +\", \"Yes\", \"3/20/2015\")\n    ]\n  };\n\n  handleSelectAllClick = event => {\n    if (event.target.checked) {\n      this.setState(state => ({ selected: state.data.map(n => n.id) }));\n      return;\n    }\n    this.setState({ selected: [] });\n  };\n\n  handleClick = (event, id) => {\n    const { selected } = this.state;\n    const selectedIndex = selected.indexOf(id);\n    let newSelected = [];\n\n    //this allows selected boxes to be checked\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1)\n      );\n    }\n    //also makes sure selected boxes to be checkd\n    this.setState({ selected: newSelected });\n  };\n\n  isSelected = id => this.state.selected.indexOf(id) !== -1;\n\n  render() {\n    const { classes } = this.props;\n    const { data, selected } = this.state;\n\n    return (\n      <Paper className={classes.root}>\n        <div className={classes.tableWrapper}>\n          {/*spacing  */}\n          <Table className={classes.table}>\n            {/* important */}\n            <EnhancedTableHead\n              numSelected={selected.length}\n              onSelectAllClick={this.handleSelectAllClick}\n              rowCount={data.length}\n            />\n            <TableBody>\n              {data.map(n => {\n                const isSelected = this.isSelected(n.id);\n                return (\n                  <TableRow\n                    className={classes.row}\n                    hover\n                    onClick={event => this.handleClick(event, n.id)}\n                    //role=\"checkbox\"\n                    //aria-checked={isSelected}\n                    tabIndex={-1}\n                    key={n.id}\n                    selected={isSelected}\n                  >\n                    {/* padding for check box and cells */}\n                    <TableCell padding=\"checkbox\">\n                      {/* checkboxes in body cells */}\n                      <Checkbox checked={isSelected} />\n                    </TableCell>\n                    {/* table body, not counting the checkbox */}\n                    <TableCell aligh=\"center\">{n.template}</TableCell>\n                    <TableCell align=\"left\">{n.showsForTherapist}</TableCell>\n                    <TableCell align=\"center\">{n.dateCreated}</TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </div>\n      </Paper>\n    );\n  }\n}\n\nEnhancedTable.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(EnhancedTable);\n"]},"metadata":{},"sourceType":"module"}