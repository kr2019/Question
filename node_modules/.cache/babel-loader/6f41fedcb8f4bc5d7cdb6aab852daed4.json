{"ast":null,"code":"var _jsxFileName = \"/Users/kenneth/repos2/mtsaas/mtrepo/src/Home/home.js\";\nimport React, { Component } from \"react\"; //import { render } from \"react-dom\";\n\nimport BigCalendar from \"react-big-calendar\";\nimport moment from \"moment\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport NewEventDialog from \"../Calendar/newEventDialog\"; //import NewEventDialog2 from \"./newEventDialog2\";\n\nimport ExistingEventDialog from \"../Calendar/existingEventDialogHooks\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport MomentUtils from \"@date-io/moment\";\nimport { MuiPickersUtilsProvider, DatePicker, TimePicker } from \"@material-ui/pickers\";\nimport { Switch, Link, Route } from \"react-router-dom\";\nimport Home from \"./home\";\nimport Container from \"@material-ui/core/Container\";\nimport Paper from \"@material-ui/core/Paper\";\nimport PropTypes from \"prop-types\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { red, lightBlue, green } from \"@material-ui/core/colors\";\nimport KPI1 from \"./kpi1\";\nimport KPI2 from \"./kpi2\";\nimport axios from \"axios\";\nconst localizer = BigCalendar.momentLocalizer(moment);\nconst propTypes = {};\nmoment().toDate();\n\nconst styles = theme => ({\n  state: {\n    open: false,\n    openV: false\n  },\n  root: {\n    marginTop: theme.spacing(5),\n    height: \"100%\" // width: \"90%\"\n\n  },\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 400\n  },\n  textField2: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 192\n  },\n  dense: {\n    marginTop: 16\n  },\n  menu: {\n    width: 200\n  },\n  root3: {\n    width: \"100%\"\n  }\n});\n\nconst navStyle = {\n  color: \"black\",\n  textDecoration: \"none\"\n};\nconst newBillTypes = [{\n  value: \"Billable\",\n  label: \"Billable\"\n}, {\n  value: \"Non-billable\",\n  label: \"Non-billable\"\n}];\nconst newClientTypes = [{\n  value: \"Individual\",\n  label: \"Individual\"\n}, {\n  value: \"Facility\",\n  label: \"Facility\"\n}];\nconst clients = [{\n  value: \"John Smith\",\n  label: \"John Smith\"\n}, {\n  value: \"Jill Smith\",\n  label: \"Jill Smith\"\n}, {\n  value: \"Ashley Flowers\",\n  label: \"Ashley Flowers\"\n}];\nconst therapists = [{\n  value: \"Therapist 1\",\n  label: \"Therapist 1\"\n}, {\n  value: \"Harry Potter\",\n  label: \"Harry Potter\"\n}, {\n  value: \"Therapist 3\",\n  label: \"Therapist 3\"\n}];\nconst categories = [{\n  value: \"None\",\n  label: \"None\"\n}];\n\nclass ReactCalendarBase extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.convertDate = date => {\n      return moment.utc(date).toDate();\n    };\n\n    this.handleClickOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false,\n        //this will set the values to blank once the window is closed\n        newBillType: \"\",\n        newClientType: \"\",\n        title: \"\",\n        newClient: \"\",\n        newTherapist: \"\",\n        newLocation: \"\",\n        newCategory: \"\",\n        selectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n        endSelectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\")\n      });\n    };\n\n    this.handleClickOpen2 = () => {\n      this.setState({\n        openV: true\n      });\n    };\n\n    this.handleClose2 = () => {\n      this.setState({\n        openV: false\n      });\n    };\n\n    this.handleChange = name => event => {\n      this.setState({\n        [name]: event.target.value\n      });\n    };\n\n    this.handleDateChangeStart = date => {\n      this.setState({\n        selectedDate: date.format(\"YYYY-MM-DD HH:mm:ss\")\n      });\n    };\n\n    this.handleDateChangeEnd = date => {\n      this.setState({\n        endSelectedDate: date.format(\"YYYY-MM-DD HH:mm:ss\")\n      });\n    };\n\n    this.state = {\n      cal_events: [//State is updated via componentDidMount\n      ],\n      data: [],\n      //id: 0,\n      newBillType: \"\",\n      newClientType: \"\",\n      // title: null,\n      newClient: \"\",\n      newTherapist: \"\",\n      newLocation: \"\",\n      newCategory: \"\",\n      newStartDate: \"\",\n      newStartTime: \"\",\n      newEndDate: \"\",\n      newEndTime: \"\",\n      information: \"\",\n      intervalIsSet: \"\",\n      idToDelete: \"\",\n      idToUpdate: \"\",\n      objectToUpdate: \"\",\n      selectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n      endSelectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\")\n    };\n  }\n\n  componentDidMount() {\n    axios.get(\"http://localhost:5000/events\").then(response => {\n      console.log(\"Got calendar data!\");\n      console.log(response.data);\n      let appointments = response.data;\n      /*\n      for (let i = 0; i < appointments.length; i++) {\n        appointments[i].start = this.convertDate(appointments[i].start);\n        appointments[i].end = this.convertDate(appointments[i].end);\n      }\n      */\n\n      this.setState({\n        cal_events: appointments\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n    /* this.getDataFromDb(); */\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n      console.log(\"Calendar interval set!\");\n    }\n  }\n  /*\n  reloadPage(prevState) {\n    // if (this.state.location !== prevState.location) {\n    window.location.reload();\n    console.log(\"Refresh!\");\n  }\n  */\n  //}\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n      console.log(\"Unmounted from events!\");\n    }\n  } // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n\n  /*\n  getDataFromDb = () => {\n    fetch(\"http://localhost:5000/events\")\n      .then(data => data.json())\n      .then(res => this.setState({ data: res.data }));\n  };\n  */\n\n  /*\n  componentDidUpdate(prevState) {\n    if (this.state.cal_events !== prevState.cal_events) {\n      console.log(\"Updated!\");\n    }\n  }\n  */\n  // this technically works, but it keeps \"updating\" non-stop instead of just the few times\n  // even technically works for state.data\n\n  /*\n  componentDidUpdate(prevState) {\n    if (this.state.cal_events !== prevState.cal_events) {\n      this.componentDidMount();\n      console.log(\"Updated!\");\n    }\n  }\n  */\n  // our put method that uses our backend api\n  // to create new query into our data base\n\n  /*\n  //this is being commented out because the same thing is already being done at onSubmit\n  putDataToDB = (\n    newBillType,\n    newClientType,\n    title,\n    newClient,\n    newTherapist,\n    newLocation,\n    newCategory\n  ) => {\n    let currentIds = this.state.data.map(data => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n     axios.post(\"http://localhost:5000/api/putData2\", {\n      id: idToBeAdded,\n      newBillType: newBillType,\n      newClientType: newClientType,\n      title: title,\n      newClient: newClient,\n      newTherapist: newTherapist,\n      newLocation: newLocation,\n      newCategory: newCategory\n      //start: start,\n      //end: end,\n      //newClient: newClient,\n      //newTherapist: newTherapist\n    });\n  };\n  */\n\n\n  onSubmit(e) {\n    //experiment keeping preventDefault\n    //e.preventDefault();\n    const obj = {\n      //title: this.state.title,\n      newBillType: this.state.newBillType,\n      newClientType: this.state.newClientType,\n      newTherapist: this.state.newTherapist,\n      newLocation: this.state.newLocation,\n      newCategory: this.state.newCategory,\n      newClient: this.state.newClient,\n      selectedDate: this.state.selectedDate,\n      endSelectedDate: this.state.endSelectedDate\n    };\n    axios.post(\"http://localhost:5000/putData2\", obj).then(res => console.log(res.data));\n    /* this will clear everything after saving+closing */\n\n    this.setState({\n      newBillType: \"\",\n      newClientType: \"\",\n      //title: \"\",\n      newClient: \"\",\n      newTherapist: \"\",\n      newLocation: \"\",\n      newCategory: \"\",\n      selectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n      endSelectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\")\n    });\n  }\n  /* show new event dialog box */\n\n\n  render() {\n    const classes = this.props.classes; //const classes = withStyles();\n\n    const _this$state = this.state,\n          cal_events = _this$state.cal_events,\n          selectedDate = _this$state.selectedDate,\n          endSelectedDate = _this$state.endSelectedDate;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, React.createElement(Container, {\n      style: {\n        height: 400\n      },\n      maxWidth: \"md\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, React.createElement(KPI2, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }), React.createElement(BigCalendar, {\n      className: classes.root,\n      selectable: true,\n      startAccessor: cal_events => new Date(cal_events.start),\n      endAccessor: cal_events => new Date(cal_events.end),\n      localizer: localizer,\n      events: cal_events //events={events}\n      ,\n      views: [\"day\"],\n      defaultDate: new Date(),\n      defaultView: \"day\",\n      onSelectEvent: this.handleClickOpen2,\n      onSelectSlot: this.handleClickOpen,\n      min: new Date(2000, 1, 1, 7),\n      max: new Date(2000, 1, 1, 18),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }), React.createElement(KPI1, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    })));\n  }\n\n}\n\nReactCalendarBase.propTypes = propTypes; //export default ReactCalendarBase;\n\nexport default withStyles(styles)(ReactCalendarBase);","map":{"version":3,"sources":["/Users/kenneth/repos2/mtsaas/mtrepo/src/Home/home.js"],"names":["React","Component","BigCalendar","moment","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Button","Grid","MenuItem","TextField","withStyles","NewEventDialog","ExistingEventDialog","MomentUtils","MuiPickersUtilsProvider","DatePicker","TimePicker","Switch","Link","Route","Home","Container","Paper","PropTypes","Card","CardContent","Typography","red","lightBlue","green","KPI1","KPI2","axios","localizer","momentLocalizer","propTypes","toDate","styles","theme","state","open","openV","root","marginTop","spacing","height","container","display","flexWrap","textField","marginLeft","marginRight","width","textField2","dense","menu","root3","navStyle","color","textDecoration","newBillTypes","value","label","newClientTypes","clients","therapists","categories","ReactCalendarBase","constructor","args","convertDate","date","utc","handleClickOpen","setState","handleClose","newBillType","newClientType","title","newClient","newTherapist","newLocation","newCategory","selectedDate","format","endSelectedDate","handleClickOpen2","handleClose2","handleChange","name","event","target","handleDateChangeStart","handleDateChangeEnd","cal_events","data","newStartDate","newStartTime","newEndDate","newEndTime","information","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","componentDidMount","get","then","response","console","log","appointments","catch","error","interval","setInterval","getDataFromDb","componentWillUnmount","clearInterval","onSubmit","e","obj","post","res","render","classes","props","Date","start","end"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n//import { render } from \"react-dom\";\n\nimport BigCalendar from \"react-big-calendar\";\nimport moment from \"moment\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport NewEventDialog from \"../Calendar/newEventDialog\";\n//import NewEventDialog2 from \"./newEventDialog2\";\nimport ExistingEventDialog from \"../Calendar/existingEventDialogHooks\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport MomentUtils from \"@date-io/moment\";\nimport {\n  MuiPickersUtilsProvider,\n  DatePicker,\n  TimePicker\n} from \"@material-ui/pickers\";\nimport { Switch, Link, Route } from \"react-router-dom\";\nimport Home from \"./home\";\nimport Container from \"@material-ui/core/Container\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport PropTypes from \"prop-types\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { red, lightBlue, green } from \"@material-ui/core/colors\";\nimport KPI1 from \"./kpi1\";\nimport KPI2 from \"./kpi2\";\n\nimport axios from \"axios\";\n\nconst localizer = BigCalendar.momentLocalizer(moment);\nconst propTypes = {};\nmoment().toDate();\n\nconst styles = theme => ({\n  state: {\n    open: false,\n    openV: false\n  },\n\n  root: {\n    marginTop: theme.spacing(5),\n    height: \"100%\"\n    // width: \"90%\"\n  },\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 400\n  },\n  textField2: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 192\n  },\n  dense: {\n    marginTop: 16\n  },\n  menu: {\n    width: 200\n  },\n  root3: {\n    width: \"100%\"\n  }\n});\n\nconst navStyle = {\n  color: \"black\",\n  textDecoration: \"none\"\n};\n\nconst newBillTypes = [\n  {\n    value: \"Billable\",\n    label: \"Billable\"\n  },\n\n  {\n    value: \"Non-billable\",\n    label: \"Non-billable\"\n  }\n];\n\nconst newClientTypes = [\n  {\n    value: \"Individual\",\n    label: \"Individual\"\n  },\n\n  {\n    value: \"Facility\",\n    label: \"Facility\"\n  }\n];\n\nconst clients = [\n  {\n    value: \"John Smith\",\n    label: \"John Smith\"\n  },\n\n  {\n    value: \"Jill Smith\",\n    label: \"Jill Smith\"\n  },\n  {\n    value: \"Ashley Flowers\",\n    label: \"Ashley Flowers\"\n  }\n];\n\nconst therapists = [\n  {\n    value: \"Therapist 1\",\n    label: \"Therapist 1\"\n  },\n\n  {\n    value: \"Harry Potter\",\n    label: \"Harry Potter\"\n  },\n  {\n    value: \"Therapist 3\",\n    label: \"Therapist 3\"\n  }\n];\n\nconst categories = [\n  {\n    value: \"None\",\n    label: \"None\"\n  }\n];\n\nclass ReactCalendarBase extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.state = {\n      cal_events: [\n        //State is updated via componentDidMount\n      ],\n      data: [],\n      //id: 0,\n      newBillType: \"\",\n      newClientType: \"\",\n      // title: null,\n      newClient: \"\",\n      newTherapist: \"\",\n      newLocation: \"\",\n      newCategory: \"\",\n      newStartDate: \"\",\n      newStartTime: \"\",\n      newEndDate: \"\",\n      newEndTime: \"\",\n      information: \"\",\n      intervalIsSet: \"\",\n      idToDelete: \"\",\n      idToUpdate: \"\",\n      objectToUpdate: \"\",\n      selectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n      endSelectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\")\n    };\n  }\n\n  convertDate = date => {\n    return moment.utc(date).toDate();\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"http://localhost:5000/events\")\n      .then(response => {\n        console.log(\"Got calendar data!\");\n        console.log(response.data);\n        let appointments = response.data;\n        /*\n        for (let i = 0; i < appointments.length; i++) {\n          appointments[i].start = this.convertDate(appointments[i].start);\n          appointments[i].end = this.convertDate(appointments[i].end);\n        }\n*/\n        this.setState({\n          cal_events: appointments\n        });\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n\n    /* this.getDataFromDb(); */\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n      console.log(\"Calendar interval set!\");\n    }\n  }\n\n  /*\n  reloadPage(prevState) {\n    // if (this.state.location !== prevState.location) {\n    window.location.reload();\n    console.log(\"Refresh!\");\n  }\n  */\n  //}\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n      console.log(\"Unmounted from events!\");\n    }\n  }\n\n  // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  /*\n  getDataFromDb = () => {\n    fetch(\"http://localhost:5000/events\")\n      .then(data => data.json())\n      .then(res => this.setState({ data: res.data }));\n  };\n  */\n  /*\n  componentDidUpdate(prevState) {\n    if (this.state.cal_events !== prevState.cal_events) {\n      console.log(\"Updated!\");\n    }\n  }\n  */\n\n  // this technically works, but it keeps \"updating\" non-stop instead of just the few times\n  // even technically works for state.data\n  /*\n  componentDidUpdate(prevState) {\n    if (this.state.cal_events !== prevState.cal_events) {\n      this.componentDidMount();\n      console.log(\"Updated!\");\n    }\n  }\n  */\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n  /*\n  //this is being commented out because the same thing is already being done at onSubmit\n  putDataToDB = (\n    newBillType,\n    newClientType,\n    title,\n    newClient,\n    newTherapist,\n    newLocation,\n    newCategory\n  ) => {\n    let currentIds = this.state.data.map(data => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post(\"http://localhost:5000/api/putData2\", {\n      id: idToBeAdded,\n      newBillType: newBillType,\n      newClientType: newClientType,\n      title: title,\n      newClient: newClient,\n      newTherapist: newTherapist,\n      newLocation: newLocation,\n      newCategory: newCategory\n      //start: start,\n      //end: end,\n      //newClient: newClient,\n      //newTherapist: newTherapist\n    });\n  };\n*/\n\n  onSubmit(e) {\n    //experiment keeping preventDefault\n    //e.preventDefault();\n\n    const obj = {\n      //title: this.state.title,\n      newBillType: this.state.newBillType,\n      newClientType: this.state.newClientType,\n      newTherapist: this.state.newTherapist,\n      newLocation: this.state.newLocation,\n      newCategory: this.state.newCategory,\n      newClient: this.state.newClient,\n      selectedDate: this.state.selectedDate,\n      endSelectedDate: this.state.endSelectedDate\n    };\n    axios\n      .post(\"http://localhost:5000/putData2\", obj)\n      .then(res => console.log(res.data));\n    /* this will clear everything after saving+closing */\n\n    this.setState({\n      newBillType: \"\",\n      newClientType: \"\",\n      //title: \"\",\n      newClient: \"\",\n      newTherapist: \"\",\n      newLocation: \"\",\n      newCategory: \"\",\n      selectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n      endSelectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\")\n    });\n  }\n\n  /* show new event dialog box */\n  handleClickOpen = () => {\n    this.setState({ open: true });\n  };\n\n  /* close new event dialog box */\n  handleClose = () => {\n    this.setState({\n      open: false,\n      //this will set the values to blank once the window is closed\n      newBillType: \"\",\n      newClientType: \"\",\n      title: \"\",\n      newClient: \"\",\n      newTherapist: \"\",\n      newLocation: \"\",\n      newCategory: \"\",\n      selectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n      endSelectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\")\n    });\n  };\n\n  /* show existing event dialog box */\n  handleClickOpen2 = () => {\n    this.setState({ openV: true });\n  };\n\n  /* close existing event dialog box */\n  handleClose2 = () => {\n    this.setState({ openV: false });\n  };\n\n  handleChange = name => event => {\n    this.setState({ [name]: event.target.value });\n  };\n\n  handleDateChangeStart = date => {\n    this.setState({ selectedDate: date.format(\"YYYY-MM-DD HH:mm:ss\") });\n  };\n\n  handleDateChangeEnd = date => {\n    this.setState({ endSelectedDate: date.format(\"YYYY-MM-DD HH:mm:ss\") });\n  };\n\n  render() {\n    const { classes } = this.props;\n    //const classes = withStyles();\n    const { cal_events, selectedDate, endSelectedDate } = this.state;\n\n    return (\n      <div>\n        <Container style={{ height: 400 }} maxWidth=\"md\">\n          <KPI2 />\n          <BigCalendar\n            className={classes.root}\n            selectable\n            startAccessor={cal_events => new Date(cal_events.start)}\n            endAccessor={cal_events => new Date(cal_events.end)}\n            localizer={localizer}\n            events={cal_events}\n            //events={events}\n            views={[\"day\"]}\n            defaultDate={new Date()}\n            defaultView=\"day\"\n            onSelectEvent={this.handleClickOpen2}\n            onSelectSlot={this.handleClickOpen}\n            min={new Date(2000, 1, 1, 7)}\n            max={new Date(2000, 1, 1, 18)}\n          />\n          <KPI1 />\n        </Container>\n      </div>\n    );\n  }\n}\n\nReactCalendarBase.propTypes = propTypes;\n\n//export default ReactCalendarBase;\nexport default withStyles(styles)(ReactCalendarBase);\n"]},"metadata":{},"sourceType":"module"}