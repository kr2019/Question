{"ast":null,"code":"var _jsxFileName = \"/Users/kenneth/repos2/mtsaas/mtrepo/src/checkTest.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport green from \"@material-ui/core/colors/green\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\nimport Favorite from \"@material-ui/icons/Favorite\";\nimport FavoriteBorder from \"@material-ui/icons/FavoriteBorder\";\nconst styles = {\n  root: {\n    color: green[600],\n    \"&$checked\": {\n      color: green[500]\n    }\n  },\n  checked: {}\n};\n\nclass CheckboxLabels extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      checkedA: true,\n      checkedB: true,\n      checkedF: true,\n      checkedG: true\n    };\n\n    this.handleChange = name => event => {\n      this.setState({\n        [name]: event.target.checked\n      });\n    };\n  }\n\n  render() {\n    const classes = this.props.classes;\n    return React.createElement(FormGroup, {\n      row: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(FormControlLabel, {\n      control: React.createElement(Checkbox, {\n        checked: this.state.checkedA,\n        onChange: this.handleChange(\"checkedA\"),\n        value: \"checkedA\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }),\n      label: \"Secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), React.createElement(FormControlLabel, {\n      control: React.createElement(Checkbox, {\n        checked: this.state.checkedB,\n        onChange: this.handleChange(\"checkedB\"),\n        value: \"checkedB\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }),\n      label: \"Primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(FormControlLabel, {\n      control: React.createElement(Checkbox, {\n        value: \"checkedC\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }),\n      label: \"Uncontrolled\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(FormControlLabel, {\n      disabled: true,\n      control: React.createElement(Checkbox, {\n        value: \"checkedD\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }),\n      label: \"Disabled\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(FormControlLabel, {\n      disabled: true,\n      control: React.createElement(Checkbox, {\n        checked: true,\n        value: \"checkedE\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }),\n      label: \"Disabled\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(FormControlLabel, {\n      control: React.createElement(Checkbox, {\n        checked: this.state.checkedF,\n        onChange: this.handleChange(\"checkedF\"),\n        value: \"checkedF\",\n        indeterminate: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }),\n      label: \"Indeterminate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(FormControlLabel, {\n      control: React.createElement(Checkbox, {\n        checked: this.state.checkedG,\n        onChange: this.handleChange(\"checkedG\"),\n        value: \"checkedG\",\n        classes: {\n          root: classes.root,\n          checked: classes.checked\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }),\n      label: \"Custom color\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(FormControlLabel, {\n      control: React.createElement(Checkbox, {\n        icon: React.createElement(FavoriteBorder, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }),\n        checkedIcon: React.createElement(Favorite, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }),\n        value: \"checkedH\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }),\n      label: \"Custom icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }));\n  }\n\n}\n\nCheckboxLabels.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(CheckboxLabels);","map":{"version":3,"sources":["/Users/kenneth/repos2/mtsaas/mtrepo/src/checkTest.js"],"names":["React","PropTypes","withStyles","green","FormGroup","FormControlLabel","Checkbox","CheckBoxOutlineBlankIcon","CheckBoxIcon","Favorite","FavoriteBorder","styles","root","color","checked","CheckboxLabels","Component","state","checkedA","checkedB","checkedF","checkedG","handleChange","name","event","setState","target","render","classes","props","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport green from \"@material-ui/core/colors/green\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\nimport Favorite from \"@material-ui/icons/Favorite\";\nimport FavoriteBorder from \"@material-ui/icons/FavoriteBorder\";\n\nconst styles = {\n  root: {\n    color: green[600],\n    \"&$checked\": {\n      color: green[500]\n    }\n  },\n  checked: {}\n};\n\nclass CheckboxLabels extends React.Component {\n  state = {\n    checkedA: true,\n    checkedB: true,\n    checkedF: true,\n    checkedG: true\n  };\n\n  handleChange = name => event => {\n    this.setState({ [name]: event.target.checked });\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <FormGroup row>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={this.state.checkedA}\n              onChange={this.handleChange(\"checkedA\")}\n              value=\"checkedA\"\n            />\n          }\n          label=\"Secondary\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={this.state.checkedB}\n              onChange={this.handleChange(\"checkedB\")}\n              value=\"checkedB\"\n              color=\"primary\"\n            />\n          }\n          label=\"Primary\"\n        />\n        <FormControlLabel\n          control={<Checkbox value=\"checkedC\" />}\n          label=\"Uncontrolled\"\n        />\n        <FormControlLabel\n          disabled\n          control={<Checkbox value=\"checkedD\" />}\n          label=\"Disabled\"\n        />\n        <FormControlLabel\n          disabled\n          control={<Checkbox checked value=\"checkedE\" />}\n          label=\"Disabled\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={this.state.checkedF}\n              onChange={this.handleChange(\"checkedF\")}\n              value=\"checkedF\"\n              indeterminate\n            />\n          }\n          label=\"Indeterminate\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={this.state.checkedG}\n              onChange={this.handleChange(\"checkedG\")}\n              value=\"checkedG\"\n              classes={{\n                root: classes.root,\n                checked: classes.checked\n              }}\n            />\n          }\n          label=\"Custom color\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              icon={<FavoriteBorder />}\n              checkedIcon={<Favorite />}\n              value=\"checkedH\"\n            />\n          }\n          label=\"Custom icon\"\n        />\n      </FormGroup>\n    );\n  }\n}\n\nCheckboxLabels.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(CheckboxLabels);\n"]},"metadata":{},"sourceType":"module"}