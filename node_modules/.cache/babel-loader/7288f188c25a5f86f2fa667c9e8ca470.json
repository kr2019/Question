{"ast":null,"code":"var _jsxFileName = \"/Users/kenneth/repos2/mtsaas/mtrepo/src/newEventDialog2.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport Button from \"@material-ui/core/Button\";\nimport axios from \"axios\";\n\nconst styles = theme => ({\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 400\n  },\n  textField2: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 192\n  },\n  dense: {\n    marginTop: 16\n  },\n  menu: {\n    width: 200\n  }\n});\n\nconst billTypes = [{\n  value: \"Billable\",\n  label: \"Billable\"\n}, {\n  value: \"Non-billable\",\n  label: \"Non-billable\"\n}];\nconst clientTypes = [{\n  value: \"Individual\",\n  label: \"Individual\"\n}, {\n  value: \"Facility\",\n  label: \"Facility\"\n}];\nconst clients = [{\n  value: \"John Smith\",\n  label: \"John Smith\"\n}, {\n  value: \"Jill Smith\",\n  label: \"Jill Smith\"\n}, {\n  value: \"Ashley Flowers\",\n  label: \"Ashley Flowers\"\n}];\nconst therapists = [{\n  value: \"Therapist 1\",\n  label: \"Therapist 1\"\n}, {\n  value: \"Harry Potter\",\n  label: \"Harry Potter\"\n}, {\n  value: \"Therapist 3\",\n  label: \"Therapist 3\"\n}];\nconst categories = [{\n  value: \"None\",\n  label: \"None\"\n}];\n\nclass OutlinedTextFields extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      //name: \"Cat in the Hat\",\n      //age: \"\",\n      //multiline: \"Controlled\",\n      //currency: \"EUR\",\n      data: [],\n      id: 0,\n      billType: null,\n      clientType: null,\n      title: null,\n      client: null,\n      therapist: null,\n      location: null,\n      category: null,\n      startDate: null,\n      startTime: null,\n      endDate: null,\n      endTime: null,\n      information: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    this.getDataFromDb = () => {\n      fetch(\"http://localhost:5000/events\").then(data => data.json()).then(res => this.setState({\n        data: res.data\n      }));\n    };\n\n    this.putDataToDB = (title, client) => {\n      let currentIds = this.state.data.map(data => data.id);\n      let idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post(\"http://localhost:5000/api/putData\", {\n        id: idToBeAdded,\n        title: title,\n        client: client //start: start,\n        //end: end,\n        //client: client,\n        //therapist: therapist\n\n      });\n    };\n\n    this.handleChange = name => event => {\n      this.setState({\n        [name]: event.target.value\n      });\n    };\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  render() {\n    const classes = this.props.classes; // const { selectedDate } = this.state;\n\n    return React.createElement(\"form\", {\n      className: classes.container,\n      noValidate: true,\n      autoComplete: \"off\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      required: true,\n      id: \"bill_type\",\n      select: true,\n      label: \"Bill Type\",\n      className: classes.textField,\n      value: this.state.billType,\n      onChange: this.handleChange(\"billType\") //helperText=\"Please select your currency\"\n      ,\n      margin: \"normal\",\n      variant: \"outlined\",\n      SelectProps: {\n        MenuProps: {\n          className: classes.menu\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, billTypes.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, option.label))), React.createElement(TextField, {\n      required: true,\n      id: \"client_type\",\n      select: true,\n      label: \"Client Type\",\n      className: classes.textField,\n      value: this.state.clientType,\n      onChange: this.handleChange(\"\") //helperText=\"Please select your currency\"\n      ,\n      margin: \"normal\",\n      variant: \"outlined\",\n      SelectProps: {\n        MenuProps: {\n          className: classes.menu\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, clientTypes.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, option.label))), React.createElement(TextField, {\n      required: true,\n      id: \"client\",\n      select: true,\n      label: \"Client\",\n      className: classes.textField,\n      value: this.state.client,\n      onChange: this.handleChange(\"client\") //helperText=\"Please select your currency\"\n      ,\n      margin: \"normal\",\n      variant: \"outlined\",\n      SelectProps: {\n        MenuProps: {\n          className: classes.menu\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, clients.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, option.label))), React.createElement(TextField, {\n      required: true,\n      id: \"therapist\",\n      select: true,\n      label: \"Therapist\",\n      className: classes.textField,\n      value: this.state.therapist,\n      onChange: this.handleChange(\"client\") //helperText=\"Please select your currency\"\n      ,\n      margin: \"normal\",\n      variant: \"outlined\",\n      SelectProps: {\n        MenuProps: {\n          className: classes.menu\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, therapists.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, option.label))), React.createElement(TextField, {\n      required: true,\n      id: \"location\",\n      label: \"Location \",\n      className: classes.textField2,\n      value: this.state.location,\n      onChange: this.handleChange(\"location\"),\n      margin: \"normal\",\n      variant: \"outlined\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      required: true,\n      id: \"category\",\n      select: true,\n      label: \"Category\",\n      className: classes.textField2,\n      value: this.state.category,\n      onChange: this.handleChange(\"category\") //helperText=\"Please select your currency\"\n      ,\n      margin: \"normal\",\n      variant: \"outlined\",\n      SelectProps: {\n        MenuProps: {\n          className: classes.menu\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, categories.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, option.label)))), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      onClick: this.handleClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, \"Save\")));\n  }\n\n}\n\nOutlinedTextFields.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(OutlinedTextFields);","map":{"version":3,"sources":["/Users/kenneth/repos2/mtsaas/mtrepo/src/newEventDialog2.js"],"names":["React","PropTypes","classNames","withStyles","MenuItem","TextField","DialogActions","DialogContent","Button","axios","styles","theme","container","display","flexWrap","textField","marginLeft","spacing","marginRight","width","textField2","dense","marginTop","menu","billTypes","value","label","clientTypes","clients","therapists","categories","OutlinedTextFields","Component","state","data","id","billType","clientType","title","client","therapist","location","category","startDate","startTime","endDate","endTime","information","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","putDataToDB","currentIds","map","idToBeAdded","includes","post","handleChange","name","event","target","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","classes","props","MenuProps","className","option","handleClose","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport Button from \"@material-ui/core/Button\";\nimport axios from \"axios\";\n\nconst styles = theme => ({\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 400\n  },\n  textField2: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 192\n  },\n  dense: {\n    marginTop: 16\n  },\n  menu: {\n    width: 200\n  }\n});\n\nconst billTypes = [\n  {\n    value: \"Billable\",\n    label: \"Billable\"\n  },\n\n  {\n    value: \"Non-billable\",\n    label: \"Non-billable\"\n  }\n];\n\nconst clientTypes = [\n  {\n    value: \"Individual\",\n    label: \"Individual\"\n  },\n\n  {\n    value: \"Facility\",\n    label: \"Facility\"\n  }\n];\n\nconst clients = [\n  {\n    value: \"John Smith\",\n    label: \"John Smith\"\n  },\n\n  {\n    value: \"Jill Smith\",\n    label: \"Jill Smith\"\n  },\n  {\n    value: \"Ashley Flowers\",\n    label: \"Ashley Flowers\"\n  }\n];\n\nconst therapists = [\n  {\n    value: \"Therapist 1\",\n    label: \"Therapist 1\"\n  },\n\n  {\n    value: \"Harry Potter\",\n    label: \"Harry Potter\"\n  },\n  {\n    value: \"Therapist 3\",\n    label: \"Therapist 3\"\n  }\n];\n\nconst categories = [\n  {\n    value: \"None\",\n    label: \"None\"\n  }\n];\n\nclass OutlinedTextFields extends React.Component {\n  state = {\n    //name: \"Cat in the Hat\",\n    //age: \"\",\n    //multiline: \"Controlled\",\n    //currency: \"EUR\",\n    data: [],\n    id: 0,\n    billType: null,\n    clientType: null,\n    title: null,\n    client: null,\n    therapist: null,\n    location: null,\n    category: null,\n    startDate: null,\n    startTime: null,\n    endDate: null,\n    endTime: null,\n    information: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null\n  };\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = () => {\n    fetch(\"http://localhost:5000/events\")\n      .then(data => data.json())\n      .then(res => this.setState({ data: res.data }));\n  };\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n\n  putDataToDB = (title, client) => {\n    let currentIds = this.state.data.map(data => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post(\"http://localhost:5000/api/putData\", {\n      id: idToBeAdded,\n      title: title,\n      client: client\n      //start: start,\n      //end: end,\n      //client: client,\n      //therapist: therapist\n    });\n  };\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n    // const { selectedDate } = this.state;\n\n    return (\n      <form className={classes.container} noValidate autoComplete=\"off\">\n        <DialogContent>\n          <TextField\n            required\n            id=\"bill_type\"\n            select\n            label=\"Bill Type\"\n            className={classes.textField}\n            value={this.state.billType}\n            onChange={this.handleChange(\"billType\")}\n            //helperText=\"Please select your currency\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            SelectProps={{\n              MenuProps: {\n                className: classes.menu\n              }\n            }}\n          >\n            {billTypes.map(option => (\n              <MenuItem key={option.value} value={option.value}>\n                {option.label}\n              </MenuItem>\n            ))}\n          </TextField>\n\n          <TextField\n            required\n            id=\"client_type\"\n            select\n            label=\"Client Type\"\n            className={classes.textField}\n            value={this.state.clientType}\n            onChange={this.handleChange(\"\")}\n            //helperText=\"Please select your currency\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            SelectProps={{\n              MenuProps: {\n                className: classes.menu\n              }\n            }}\n          >\n            {clientTypes.map(option => (\n              <MenuItem key={option.value} value={option.value}>\n                {option.label}\n              </MenuItem>\n            ))}\n          </TextField>\n          <TextField\n            required\n            id=\"client\"\n            select\n            label=\"Client\"\n            className={classes.textField}\n            value={this.state.client}\n            onChange={this.handleChange(\"client\")}\n            //helperText=\"Please select your currency\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            SelectProps={{\n              MenuProps: {\n                className: classes.menu\n              }\n            }}\n          >\n            {clients.map(option => (\n              <MenuItem key={option.value} value={option.value}>\n                {option.label}\n              </MenuItem>\n            ))}\n          </TextField>\n          <TextField\n            required\n            id=\"therapist\"\n            select\n            label=\"Therapist\"\n            className={classes.textField}\n            value={this.state.therapist}\n            onChange={this.handleChange(\"client\")}\n            //helperText=\"Please select your currency\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            SelectProps={{\n              MenuProps: {\n                className: classes.menu\n              }\n            }}\n          >\n            {therapists.map(option => (\n              <MenuItem key={option.value} value={option.value}>\n                {option.label}\n              </MenuItem>\n            ))}\n          </TextField>\n          <TextField\n            required\n            id=\"location\"\n            label=\"Location \"\n            className={classes.textField2}\n            value={this.state.location}\n            onChange={this.handleChange(\"location\")}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <TextField\n            required\n            id=\"category\"\n            select\n            label=\"Category\"\n            className={classes.textField2}\n            value={this.state.category}\n            onChange={this.handleChange(\"category\")}\n            //helperText=\"Please select your currency\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            SelectProps={{\n              MenuProps: {\n                className: classes.menu\n              }\n            }}\n          >\n            {categories.map(option => (\n              <MenuItem key={option.value} value={option.value}>\n                {option.label}\n              </MenuItem>\n            ))}\n          </TextField>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={this.handleClose} color=\"primary\">\n            Save\n          </Button>\n        </DialogActions>\n      </form>\n    );\n  }\n}\n\nOutlinedTextFields.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(OutlinedTextFields);\n"]},"metadata":{},"sourceType":"module"}