{"ast":null,"code":"var _jsxFileName = \"/Users/kenneth/repos2/mtsaas/mtrepo/src/ReactCalendarBase.js\";\nimport React, { Component } from \"react\"; //import { render } from \"react-dom\";\n\nimport events from \"./events\";\nimport BigCalendar from \"react-big-calendar\";\nimport moment from \"moment\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport NewEventDialog from \"./newEventDialog\";\nimport ExistingEventDialog from \"./existingEventDialog\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport axios from \"axios\"; //test\n\nconst localizer = BigCalendar.momentLocalizer(moment);\nconst propTypes = {};\n\nconst styles = theme => ({\n  state: {\n    open: false,\n    openV: false,\n    cal_events: []\n  },\n  root: {\n    padding: theme.spacing(10, 10),\n    height: \"100%\",\n    width: \"90%\"\n  }\n});\n\nclass ReactCalendarBase extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.convertDate = date => {\n      return moment.utc(date).toDate();\n    };\n\n    this.handleClickOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.handleClickOpen2 = () => {\n      this.setState({\n        openV: true\n      });\n    };\n\n    this.handleClose2 = () => {\n      this.setState({\n        openV: false\n      });\n    };\n\n    this.handleChange = name => event => {\n      this.setState({\n        [name]: event.target.value\n      });\n    };\n\n    this.state = {\n      events\n    };\n  }\n\n  componentDidMount() {\n    axios.get(\"http://localhost:5000/events\").then(response => {\n      console.log(response.data);\n      let appointments = response.data;\n\n      for (let i = 0; i < appointments.length; i++) {\n        appointments[i].start = this.convertDate(appointments[i].start);\n        appointments[i].end = this.convertDate(appointments[i].end);\n      }\n\n      this.setState({\n        cal_events: appointments\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n  /* show new event dialog box */\n\n\n  render() {\n    const classes = this.props.classes; //const classes = withStyles();\n\n    const cal_events = this.state.cal_events;\n    return React.createElement(\"div\", {\n      style: {\n        height: 1000\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(BigCalendar, {\n      className: classes.root,\n      selectable: true,\n      localizer: localizer,\n      events: cal_events // events={events}\n      ,\n      views: [\"month\", \"week\", \"day\"],\n      defaultDate: new Date(2019, 3, 1),\n      onSelectEvent: this.handleClickOpen2,\n      onSelectSlot: this.handleClickOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(Dialog, {\n      open: this.state.openV,\n      onClose: this.handleClose2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(ExistingEventDialog, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleClose2,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      onClick: this.handleClose2,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Save\"), React.createElement(Button, {\n      onClick: this.handleClose2,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Save & Next\"))), React.createElement(Dialog, {\n      open: this.state.open,\n      onClose: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(NewEventDialog, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      onClick: this.handleClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Save\"))));\n  }\n\n}\n\nReactCalendarBase.propTypes = propTypes; //export default ReactCalendarBase;\n\nexport default withStyles(styles)(ReactCalendarBase);","map":{"version":3,"sources":["/Users/kenneth/repos2/mtsaas/mtrepo/src/ReactCalendarBase.js"],"names":["React","Component","events","BigCalendar","moment","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Button","Grid","withStyles","NewEventDialog","ExistingEventDialog","axios","localizer","momentLocalizer","propTypes","styles","theme","state","open","openV","cal_events","root","padding","spacing","height","width","ReactCalendarBase","constructor","args","convertDate","date","utc","toDate","handleClickOpen","setState","handleClose","handleClickOpen2","handleClose2","handleChange","name","event","target","value","componentDidMount","get","then","response","console","log","data","appointments","i","length","start","end","catch","error","render","classes","props","Date"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n//import { render } from \"react-dom\";\nimport events from \"./events\";\nimport BigCalendar from \"react-big-calendar\";\nimport moment from \"moment\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport NewEventDialog from \"./newEventDialog\";\nimport ExistingEventDialog from \"./existingEventDialog\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\nimport axios from \"axios\";\n//test\n\nconst localizer = BigCalendar.momentLocalizer(moment);\nconst propTypes = {};\n\nconst styles = theme => ({\n  state: {\n    open: false,\n    openV: false,\n    cal_events: []\n  },\n\n  root: {\n    padding: theme.spacing(10, 10),\n    height: \"100%\",\n    width: \"90%\"\n  }\n});\n\nclass ReactCalendarBase extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.state = { events };\n  }\n\n  convertDate = date => {\n    return moment.utc(date).toDate();\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"http://localhost:5000/events\")\n      .then(response => {\n        console.log(response.data);\n        let appointments = response.data;\n\n        for (let i = 0; i < appointments.length; i++) {\n          appointments[i].start = this.convertDate(appointments[i].start);\n          appointments[i].end = this.convertDate(appointments[i].end);\n        }\n\n        this.setState({\n          cal_events: appointments\n        });\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n  }\n\n  /* show new event dialog box */\n  handleClickOpen = () => {\n    this.setState({ open: true });\n  };\n\n  /* close new event dialog box */\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  /* show existing event dialog box */\n  handleClickOpen2 = () => {\n    this.setState({ openV: true });\n  };\n\n  /* close existing event dialog box */\n  handleClose2 = () => {\n    this.setState({ openV: false });\n  };\n\n  handleChange = name => event => {\n    this.setState({ [name]: event.target.value });\n  };\n\n  render() {\n    const { classes } = this.props;\n    //const classes = withStyles();\n    const { cal_events } = this.state;\n\n    return (\n      <div style={{ height: 1000 }}>\n        <BigCalendar\n          className={classes.root}\n          selectable\n          localizer={localizer}\n          events={cal_events}\n          // events={events}\n          views={[\"month\", \"week\", \"day\"]}\n          defaultDate={new Date(2019, 3, 1)}\n          onSelectEvent={this.handleClickOpen2}\n          onSelectSlot={this.handleClickOpen}\n        />\n\n        {/* existing dialog */}\n        <Dialog open={this.state.openV} onClose={this.handleClose2}>\n          <DialogContent>\n            <ExistingEventDialog />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose2} color=\"primary\">\n              Cancel\n            </Button>\n            <Button onClick={this.handleClose2} color=\"primary\">\n              Save\n            </Button>\n            <Button onClick={this.handleClose2} color=\"primary\">\n              Save & Next\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n        <Dialog open={this.state.open} onClose={this.handleClose}>\n          <DialogContent>\n            <NewEventDialog />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Button onClick={this.handleClose} color=\"primary\">\n              Save\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nReactCalendarBase.propTypes = propTypes;\n\n//export default ReactCalendarBase;\nexport default withStyles(styles)(ReactCalendarBase);\n"]},"metadata":{},"sourceType":"module"}