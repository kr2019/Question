{"ast":null,"code":"var _jsxFileName = \"/Users/kenneth/repos2/mtsaas/mtrepo/src/frontEndTest.js\";\n// /client/App.js\nimport React, { Component } from \"react\";\nimport axios from \"axios\"; //tests\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      id: 0,\n      title: null,\n      information: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    this.getDataFromDb = () => {\n      fetch(\"http://localhost:5000/events\").then(data => data.json()).then(res => this.setState({\n        data: res.data\n      }));\n    };\n\n    this.putDataToDB = title => {\n      let currentIds = this.state.data.map(data => data.id);\n      let idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post(\"http://localhost:5000/api/putData\", {\n        id: idToBeAdded,\n        title: title //start: start,\n        //end: end,\n        //client: client,\n        //therapist: therapist\n\n      });\n    };\n\n    this.updateDB = (idToUpdate, updateToApply) => {\n      let objIdToUpdate = null;\n      parseInt(idToUpdate);\n      this.state.data.forEach(dat => {\n        if (dat.id == idToUpdate) {\n          objIdToUpdate = dat._id;\n        }\n      });\n      axios.post(\"http://localhost:3001/api/updateData\", {\n        id: objIdToUpdate,\n        update: {\n          title: updateToApply\n        }\n      });\n    };\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  onSubmit(e) {\n    //e.preventDefault();\n    const obj = {\n      title: this.state.title\n    };\n    axios.post(\"http://localhost:5000/putData\", obj).then(res => console.log(res.data));\n    this.setState({\n      title: \"\"\n    });\n  } // our delete method that uses our backend api\n  // to remove existing database information\n\n  /*\n  deleteFromDB = idTodelete => {\n    parseInt(idTodelete);\n    let objIdToDelete = null;\n    this.state.data.forEach(dat => {\n      if (dat.id == idTodelete) {\n        objIdToDelete = dat._id;\n      }\n    });\n     axios.delete(\"http://localhost:3001/api/deleteData\", {\n      data: {\n        id: objIdToDelete\n      }\n    });\n  };\n  */\n  // our update method that uses our backend api\n  // to overwrite existing data base information\n\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const data = this.state.data;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        padding: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onChange: e => this.setState({\n        title: e.target.value\n      }),\n      placeholder: \"add something in the database\",\n      style: {\n        width: \"200px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.onSubmit(this.state.title),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"ADD title\")), React.createElement(\"div\", {\n      style: {\n        padding: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: \"200px\"\n      },\n      onChange: e => this.setState({\n        idToUpdate: e.target.value\n      }),\n      placeholder: \"id of item to update here\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: \"200px\"\n      },\n      onChange: e => this.setState({\n        updateToApply: e.target.value\n      }),\n      placeholder: \"put new value of the item here\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.updateDB(this.state.idToUpdate, this.state.updateToApply),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"UPDATE\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kenneth/repos2/mtsaas/mtrepo/src/frontEndTest.js"],"names":["React","Component","axios","App","state","data","id","title","information","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","putDataToDB","currentIds","map","idToBeAdded","includes","post","updateDB","updateToApply","objIdToUpdate","parseInt","forEach","dat","_id","update","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","onSubmit","e","obj","console","log","render","padding","target","value","width"],"mappings":"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","sourcesContent":["// /client/App.js\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\n//tests\n\nclass App extends Component {\n  // initialize our state\n  state = {\n    data: [],\n    id: 0,\n    title: null,\n    information: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null\n  };\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = () => {\n    fetch(\"http://localhost:5000/events\")\n      .then(data => data.json())\n      .then(res => this.setState({ data: res.data }));\n  };\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n\n  putDataToDB = title => {\n    let currentIds = this.state.data.map(data => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post(\"http://localhost:5000/api/putData\", {\n      id: idToBeAdded,\n      title: title\n      //start: start,\n      //end: end,\n      //client: client,\n      //therapist: therapist\n    });\n  };\n\n  onSubmit(e) {\n    //e.preventDefault();\n    const obj = {\n      title: this.state.title\n    };\n    axios\n      .post(\"http://localhost:5000/putData\", obj)\n      .then(res => console.log(res.data));\n\n    this.setState({\n      title: \"\"\n    });\n  }\n\n  // our delete method that uses our backend api\n  // to remove existing database information\n  /*\n  deleteFromDB = idTodelete => {\n    parseInt(idTodelete);\n    let objIdToDelete = null;\n    this.state.data.forEach(dat => {\n      if (dat.id == idTodelete) {\n        objIdToDelete = dat._id;\n      }\n    });\n\n    axios.delete(\"http://localhost:3001/api/deleteData\", {\n      data: {\n        id: objIdToDelete\n      }\n    });\n  };\n  */\n\n  // our update method that uses our backend api\n  // to overwrite existing data base information\n  updateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null;\n    parseInt(idToUpdate);\n    this.state.data.forEach(dat => {\n      if (dat.id == idToUpdate) {\n        objIdToUpdate = dat._id;\n      }\n    });\n\n    axios.post(\"http://localhost:3001/api/updateData\", {\n      id: objIdToUpdate,\n      update: { title: updateToApply }\n    });\n  };\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const { data } = this.state;\n    return (\n      <div>\n        {/*\n        <ul>\n          {data.length <= 0\n            ? \"NO DB ENTRIES YET\"\n            : data.map(dat => (\n                <li style={{ padding: \"10px\" }} key={data.title}>\n                  <span style={{ color: \"gray\" }}> id: </span> {dat.id} <br />\n                  <span style={{ color: \"gray\" }}> title: </span>\n                  {dat.title} <br />\n                  <span style={{ color: \"gray\" }}> information: </span>\n                  {dat.information}\n                </li>\n              ))}\n        </ul>\n            */}\n        <div style={{ padding: \"10px\" }}>\n          <input\n            type=\"text\"\n            onChange={e => this.setState({ title: e.target.value })}\n            placeholder=\"add something in the database\"\n            style={{ width: \"200px\" }}\n          />\n          <button onClick={() => this.onSubmit(this.state.title)}>\n            ADD title\n          </button>\n        </div>\n        {/*\n        <div style={{ padding: \"10px\" }}>\n          <input\n            type=\"text\"\n            style={{ width: \"200px\" }}\n            onChange={e => this.setState({ idToDelete: e.target.value })}\n            placeholder=\"put id of item to delete here\"\n          />\n          \n          <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n            DELETE\n          </button>\n        </div>\n        */}\n        <div style={{ padding: \"10px\" }}>\n          <input\n            type=\"text\"\n            style={{ width: \"200px\" }}\n            onChange={e => this.setState({ idToUpdate: e.target.value })}\n            placeholder=\"id of item to update here\"\n          />\n          <input\n            type=\"text\"\n            style={{ width: \"200px\" }}\n            onChange={e => this.setState({ updateToApply: e.target.value })}\n            placeholder=\"put new value of the item here\"\n          />\n          <button\n            onClick={() =>\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n            }\n          >\n            UPDATE\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}