{"ast":null,"code":"var _jsxFileName = \"/Users/kenneth/repos2/mtsaas/mtrepo/src/ReactCalendarBase.js\";\nimport React, { Component } from \"react\"; //import { render } from \"react-dom\";\n\nimport events from \"./events\";\nimport BigCalendar from \"react-big-calendar\";\nimport moment from \"moment\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport NewEventDialog from \"./newEventDialog\"; //import NewEventDialog2 from \"./newEventDialog2\";\n\nimport ExistingEventDialog from \"./existingEventDialog\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport MomentUtils from \"@date-io/moment\";\nimport { MuiPickersUtilsProvider, TimePicker, DatePicker } from \"material-ui-pickers\";\nimport axios from \"axios\"; //tes\n\nconst localizer = BigCalendar.momentLocalizer(moment);\nconst propTypes = {};\n\nconst styles = theme => ({\n  state: {\n    open: false,\n    openV: false\n  },\n  root: {\n    padding: theme.spacing(10, 10),\n    height: \"100%\",\n    width: \"90%\"\n  },\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 400\n  },\n  textField2: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 192\n  },\n  dense: {\n    marginTop: 16\n  },\n  menu: {\n    width: 200\n  }\n});\n\nconst newBillTypes = [{\n  value: \"Billable\",\n  label: \"Billable\"\n}, {\n  value: \"Non-billable\",\n  label: \"Non-billable\"\n}];\nconst newClientTypes = [{\n  value: \"Individual\",\n  label: \"Individual\"\n}, {\n  value: \"Facility\",\n  label: \"Facility\"\n}];\nconst clients = [{\n  value: \"John Smith\",\n  label: \"John Smith\"\n}, {\n  value: \"Jill Smith\",\n  label: \"Jill Smith\"\n}, {\n  value: \"Ashley Flowers\",\n  label: \"Ashley Flowers\"\n}];\nconst therapists = [{\n  value: \"Therapist 1\",\n  label: \"Therapist 1\"\n}, {\n  value: \"Harry Potter\",\n  label: \"Harry Potter\"\n}, {\n  value: \"Therapist 3\",\n  label: \"Therapist 3\"\n}];\nconst categories = [{\n  value: \"None\",\n  label: \"None\"\n}];\n\nclass ReactCalendarBase extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.convertDate = date => {\n      return moment.utc(date).toDate();\n    };\n\n    this.getDataFromDb = () => {\n      fetch(\"http://localhost:5000/events\").then(data => data.json()).then(res => this.setState({\n        data: res.data\n      }));\n    };\n\n    this.handleClickOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false\n        /*\n        //this will set the values to blank once the window is closed\n        newBillType: \"\",\n        newClientType: \"\",\n        title: \"\",\n        newClient: \"\",\n        newTherapist: \"\",\n        newLocation: \"\",\n        newCategory: \"\"\n        */\n\n      });\n    };\n\n    this.handleClickOpen2 = () => {\n      this.setState({\n        openV: true\n      });\n    };\n\n    this.handleClose2 = () => {\n      this.setState({\n        openV: false\n      });\n    };\n\n    this.handleChange = name => event => {\n      this.setState({\n        [name]: event.target.value\n      });\n    };\n\n    this.state = {\n      cal_events: [//State is updated via componentDidMount\n      ],\n      data: [],\n      //id: 0,\n      newBillType: null,\n      newClientType: null,\n      // title: null,\n      newClient: null,\n      newTherapist: null,\n      newLocation: null,\n      newCategory: null,\n      newStartDate: null,\n      newStartTime: null,\n      newEndDate: null,\n      newEndTime: null,\n      information: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n  }\n\n  componentDidMount() {\n    axios.get(\"http://localhost:5000/events\").then(response => {\n      console.log(response.data);\n      let appointments = response.data;\n\n      for (let i = 0; i < appointments.length; i++) {\n        appointments[i].start = this.convertDate(appointments[i].start);\n        appointments[i].end = this.convertDate(appointments[i].end);\n      }\n\n      this.setState({\n        cal_events: appointments\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n    this.getDataFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n\n  /*\n  //this is being commented out because the same thing is already being done at onSubmit\n  putDataToDB = (\n    newBillType,\n    newClientType,\n    title,\n    newClient,\n    newTherapist,\n    newLocation,\n    newCategory\n  ) => {\n    let currentIds = this.state.data.map(data => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n     axios.post(\"http://localhost:5000/api/putData2\", {\n      id: idToBeAdded,\n      newBillType: newBillType,\n      newClientType: newClientType,\n      title: title,\n      newClient: newClient,\n      newTherapist: newTherapist,\n      newLocation: newLocation,\n      newCategory: newCategory\n      //start: start,\n      //end: end,\n      //newClient: newClient,\n      //newTherapist: newTherapist\n    });\n  };\n  */\n  onSubmit(e) {\n    //e.preventDefault();\n    const obj = {\n      //title: this.state.title,\n      newBillType: this.state.newBillType,\n      newClientType: this.state.newClientType,\n      newTherapist: this.state.newTherapist,\n      newLocation: this.state.newLocation,\n      newCategory: this.state.newCategory,\n      newClient: this.state.newClient\n    };\n    axios.post(\"http://localhost:5000/putData2\", obj).then(res => console.log(res.data));\n    /* this will clear everything after saving+closing */\n\n    this.setState({\n      newBillType: \"\",\n      newClientType: \"\",\n      title: \"\",\n      newClient: \"\",\n      newTherapist: \"\",\n      newLocation: \"\",\n      newCategory: \"\"\n    });\n  }\n  /* show new event dialog box */\n\n\n  render() {\n    const classes = this.props.classes; //const classes = withStyles();\n\n    const cal_events = this.state.cal_events;\n    return React.createElement(\"div\", {\n      style: {\n        height: 1000\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(BigCalendar, {\n      className: classes.root,\n      selectable: true,\n      localizer: localizer,\n      events: cal_events //events={events}\n      ,\n      views: [\"month\", \"week\", \"day\"],\n      defaultDate: new Date(2019, 3, 1),\n      onSelectEvent: this.handleClickOpen2,\n      onSelectSlot: this.handleClickOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), React.createElement(Dialog, {\n      open: this.state.openV,\n      onClose: this.handleClose2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, React.createElement(ExistingEventDialog, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleClose2,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      onClick: this.handleClose2,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, \"Save\"), React.createElement(Button, {\n      onClick: this.handleClose2,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, \"Save & Next\"))), React.createElement(Dialog, {\n      open: this.state.open,\n      onClose: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: classes.container,\n      noValidate: true,\n      autoComplete: \"off\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      required: true,\n      id: \"bill_type\",\n      select: true,\n      label: \"Bill Type\",\n      className: classes.textField,\n      value: this.state.newBillType,\n      onChange: e => this.setState({\n        newBillType: e.target.value\n      }) //helperText=\"Please select your currency\"\n      ,\n      margin: \"normal\",\n      variant: \"outlined\",\n      SelectProps: {\n        MenuProps: {\n          className: classes.menu\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, newBillTypes.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, option.label))), React.createElement(TextField, {\n      required: true,\n      id: \"client_type\",\n      select: true,\n      label: \"Client Type\",\n      className: classes.textField,\n      value: this.state.newClientType,\n      onChange: e => this.setState({\n        newClientType: e.target.value\n      }) //helperText=\"Please select your currency\"\n      ,\n      margin: \"normal\",\n      variant: \"outlined\",\n      SelectProps: {\n        MenuProps: {\n          className: classes.menu\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, newClientTypes.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, option.label))), React.createElement(TextField, {\n      required: true,\n      id: \"newClient\",\n      select: true,\n      label: \"Client\",\n      className: classes.textField,\n      value: this.state.newClient,\n      onChange: e => this.setState({\n        newClient: e.target.value\n      }) //helperText=\"Please select your currency\"\n      ,\n      margin: \"normal\",\n      variant: \"outlined\",\n      SelectProps: {\n        MenuProps: {\n          className: classes.menu\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, clients.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, option.label))), React.createElement(TextField, {\n      required: true,\n      id: \"newTherapist\",\n      select: true,\n      label: \"Therapist\",\n      className: classes.textField,\n      value: this.state.newTherapist,\n      onChange: e => this.setState({\n        newTherapist: e.target.value\n      }) //helperText=\"Please select your currency\"\n      ,\n      margin: \"normal\",\n      variant: \"outlined\",\n      SelectProps: {\n        MenuProps: {\n          className: classes.menu\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, therapists.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, option.label))), React.createElement(TextField, {\n      required: true,\n      id: \"newLocation\",\n      label: \"Location \",\n      className: classes.textField2,\n      value: this.state.newLocation,\n      onChange: e => this.setState({\n        newLocation: e.target.value\n      }),\n      margin: \"normal\",\n      variant: \"outlined\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      required: true,\n      id: \"newCategory\",\n      select: true,\n      label: \"Category\",\n      className: classes.textField2,\n      value: this.state.newCategory,\n      onChange: e => this.setState({\n        newCategory: e.target.value\n      }) //helperText=\"Please select your currency\"\n      ,\n      margin: \"normal\",\n      variant: \"outlined\",\n      SelectProps: {\n        MenuProps: {\n          className: classes.menu\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, categories.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }, option.label)))), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      onClick: () => {\n        this.onSubmit( //this.state.title,\n        this.state.newBillType, this.state.newClientType, this.state.newClient, this.state.thereapist, this.state.newLocation, this.state.newCategory);\n        this.handleClose();\n      },\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }, \"Save & Close\")))));\n  }\n\n}\n\nReactCalendarBase.propTypes = propTypes; //export default ReactCalendarBase;\n\nexport default withStyles(styles)(ReactCalendarBase);","map":{"version":3,"sources":["/Users/kenneth/repos2/mtsaas/mtrepo/src/ReactCalendarBase.js"],"names":["React","Component","events","BigCalendar","moment","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Button","Grid","MenuItem","TextField","withStyles","NewEventDialog","ExistingEventDialog","MomentUtils","MuiPickersUtilsProvider","TimePicker","DatePicker","axios","localizer","momentLocalizer","propTypes","styles","theme","state","open","openV","root","padding","spacing","height","width","container","display","flexWrap","textField","marginLeft","marginRight","textField2","dense","marginTop","menu","newBillTypes","value","label","newClientTypes","clients","therapists","categories","ReactCalendarBase","constructor","args","convertDate","date","utc","toDate","getDataFromDb","fetch","then","data","json","res","setState","handleClickOpen","handleClose","handleClickOpen2","handleClose2","handleChange","name","event","target","cal_events","newBillType","newClientType","newClient","newTherapist","newLocation","newCategory","newStartDate","newStartTime","newEndDate","newEndTime","information","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","componentDidMount","get","response","console","log","appointments","i","length","start","end","catch","error","interval","setInterval","componentWillUnmount","clearInterval","onSubmit","e","obj","post","title","render","classes","props","Date","MenuProps","className","map","option","thereapist"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n//import { render } from \"react-dom\";\nimport events from \"./events\";\nimport BigCalendar from \"react-big-calendar\";\nimport moment from \"moment\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport NewEventDialog from \"./newEventDialog\";\n//import NewEventDialog2 from \"./newEventDialog2\";\nimport ExistingEventDialog from \"./existingEventDialog\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport MomentUtils from \"@date-io/moment\";\nimport {\n  MuiPickersUtilsProvider,\n  TimePicker,\n  DatePicker\n} from \"material-ui-pickers\";\n\nimport axios from \"axios\";\n//tes\n\nconst localizer = BigCalendar.momentLocalizer(moment);\nconst propTypes = {};\n\nconst styles = theme => ({\n  state: {\n    open: false,\n    openV: false\n  },\n\n  root: {\n    padding: theme.spacing(10, 10),\n    height: \"100%\",\n    width: \"90%\"\n  },\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 400\n  },\n  textField2: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 192\n  },\n  dense: {\n    marginTop: 16\n  },\n  menu: {\n    width: 200\n  }\n});\n\nconst newBillTypes = [\n  {\n    value: \"Billable\",\n    label: \"Billable\"\n  },\n\n  {\n    value: \"Non-billable\",\n    label: \"Non-billable\"\n  }\n];\n\nconst newClientTypes = [\n  {\n    value: \"Individual\",\n    label: \"Individual\"\n  },\n\n  {\n    value: \"Facility\",\n    label: \"Facility\"\n  }\n];\n\nconst clients = [\n  {\n    value: \"John Smith\",\n    label: \"John Smith\"\n  },\n\n  {\n    value: \"Jill Smith\",\n    label: \"Jill Smith\"\n  },\n  {\n    value: \"Ashley Flowers\",\n    label: \"Ashley Flowers\"\n  }\n];\n\nconst therapists = [\n  {\n    value: \"Therapist 1\",\n    label: \"Therapist 1\"\n  },\n\n  {\n    value: \"Harry Potter\",\n    label: \"Harry Potter\"\n  },\n  {\n    value: \"Therapist 3\",\n    label: \"Therapist 3\"\n  }\n];\n\nconst categories = [\n  {\n    value: \"None\",\n    label: \"None\"\n  }\n];\n\nclass ReactCalendarBase extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.state = {\n      cal_events: [\n        //State is updated via componentDidMount\n      ],\n      data: [],\n      //id: 0,\n      newBillType: null,\n      newClientType: null,\n      // title: null,\n      newClient: null,\n      newTherapist: null,\n      newLocation: null,\n      newCategory: null,\n      newStartDate: null,\n      newStartTime: null,\n      newEndDate: null,\n      newEndTime: null,\n      information: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n  }\n\n  convertDate = date => {\n    return moment.utc(date).toDate();\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"http://localhost:5000/events\")\n      .then(response => {\n        console.log(response.data);\n        let appointments = response.data;\n\n        for (let i = 0; i < appointments.length; i++) {\n          appointments[i].start = this.convertDate(appointments[i].start);\n          appointments[i].end = this.convertDate(appointments[i].end);\n        }\n\n        this.setState({\n          cal_events: appointments\n        });\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = () => {\n    fetch(\"http://localhost:5000/events\")\n      .then(data => data.json())\n      .then(res => this.setState({ data: res.data }));\n  };\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n  /*\n  //this is being commented out because the same thing is already being done at onSubmit\n  putDataToDB = (\n    newBillType,\n    newClientType,\n    title,\n    newClient,\n    newTherapist,\n    newLocation,\n    newCategory\n  ) => {\n    let currentIds = this.state.data.map(data => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post(\"http://localhost:5000/api/putData2\", {\n      id: idToBeAdded,\n      newBillType: newBillType,\n      newClientType: newClientType,\n      title: title,\n      newClient: newClient,\n      newTherapist: newTherapist,\n      newLocation: newLocation,\n      newCategory: newCategory\n      //start: start,\n      //end: end,\n      //newClient: newClient,\n      //newTherapist: newTherapist\n    });\n  };\n*/\n\n  onSubmit(e) {\n    //e.preventDefault();\n    const obj = {\n      //title: this.state.title,\n      newBillType: this.state.newBillType,\n      newClientType: this.state.newClientType,\n      newTherapist: this.state.newTherapist,\n      newLocation: this.state.newLocation,\n      newCategory: this.state.newCategory,\n      newClient: this.state.newClient\n    };\n    axios\n      .post(\"http://localhost:5000/putData2\", obj)\n      .then(res => console.log(res.data));\n    /* this will clear everything after saving+closing */\n\n    this.setState({\n      newBillType: \"\",\n      newClientType: \"\",\n      title: \"\",\n      newClient: \"\",\n      newTherapist: \"\",\n      newLocation: \"\",\n      newCategory: \"\"\n    });\n  }\n\n  /* show new event dialog box */\n  handleClickOpen = () => {\n    this.setState({ open: true });\n  };\n\n  /* close new event dialog box */\n  handleClose = () => {\n    this.setState({\n      open: false\n      /*\n      //this will set the values to blank once the window is closed\n      newBillType: \"\",\n      newClientType: \"\",\n      title: \"\",\n      newClient: \"\",\n      newTherapist: \"\",\n      newLocation: \"\",\n      newCategory: \"\"\n*/\n    });\n  };\n\n  /* show existing event dialog box */\n  handleClickOpen2 = () => {\n    this.setState({ openV: true });\n  };\n\n  /* close existing event dialog box */\n  handleClose2 = () => {\n    this.setState({ openV: false });\n  };\n\n  handleChange = name => event => {\n    this.setState({ [name]: event.target.value });\n  };\n\n  render() {\n    const { classes } = this.props;\n    //const classes = withStyles();\n    const { cal_events } = this.state;\n\n    return (\n      <div style={{ height: 1000 }}>\n        <BigCalendar\n          className={classes.root}\n          selectable\n          localizer={localizer}\n          events={cal_events}\n          //events={events}\n          views={[\"month\", \"week\", \"day\"]}\n          defaultDate={new Date(2019, 3, 1)}\n          onSelectEvent={this.handleClickOpen2}\n          onSelectSlot={this.handleClickOpen}\n        />\n\n        {/* existing dialog */}\n        <Dialog open={this.state.openV} onClose={this.handleClose2}>\n          <DialogContent>\n            <ExistingEventDialog />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose2} color=\"primary\">\n              Cancel\n            </Button>\n            <Button onClick={this.handleClose2} color=\"primary\">\n              Save\n            </Button>\n            <Button onClick={this.handleClose2} color=\"primary\">\n              Save & Next\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n        <Dialog open={this.state.open} onClose={this.handleClose}>\n          <form className={classes.container} noValidate autoComplete=\"off\">\n            <DialogContent>\n              {/*\n              <TextField\n                required\n                id=\"title\"\n                label=\"Title \"\n                className={classes.textField}\n                value={this.state.title}\n                onChange={e => this.setState({ title: e.target.value })}\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            */}\n              <TextField\n                required\n                id=\"bill_type\"\n                select\n                label=\"Bill Type\"\n                className={classes.textField}\n                value={this.state.newBillType}\n                onChange={e => this.setState({ newBillType: e.target.value })}\n                //helperText=\"Please select your currency\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                SelectProps={{\n                  MenuProps: {\n                    className: classes.menu\n                  }\n                }}\n              >\n                {newBillTypes.map(option => (\n                  <MenuItem key={option.value} value={option.value}>\n                    {option.label}\n                  </MenuItem>\n                ))}\n              </TextField>\n\n              <TextField\n                required\n                id=\"client_type\"\n                select\n                label=\"Client Type\"\n                className={classes.textField}\n                value={this.state.newClientType}\n                onChange={e => this.setState({ newClientType: e.target.value })}\n                //helperText=\"Please select your currency\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                SelectProps={{\n                  MenuProps: {\n                    className: classes.menu\n                  }\n                }}\n              >\n                {newClientTypes.map(option => (\n                  <MenuItem key={option.value} value={option.value}>\n                    {option.label}\n                  </MenuItem>\n                ))}\n              </TextField>\n              <TextField\n                required\n                id=\"newClient\"\n                select\n                label=\"Client\"\n                className={classes.textField}\n                value={this.state.newClient}\n                onChange={e => this.setState({ newClient: e.target.value })}\n                //helperText=\"Please select your currency\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                SelectProps={{\n                  MenuProps: {\n                    className: classes.menu\n                  }\n                }}\n              >\n                {clients.map(option => (\n                  <MenuItem key={option.value} value={option.value}>\n                    {option.label}\n                  </MenuItem>\n                ))}\n              </TextField>\n              <TextField\n                required\n                id=\"newTherapist\"\n                select\n                label=\"Therapist\"\n                className={classes.textField}\n                value={this.state.newTherapist}\n                onChange={e => this.setState({ newTherapist: e.target.value })}\n                //helperText=\"Please select your currency\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                SelectProps={{\n                  MenuProps: {\n                    className: classes.menu\n                  }\n                }}\n              >\n                {therapists.map(option => (\n                  <MenuItem key={option.value} value={option.value}>\n                    {option.label}\n                  </MenuItem>\n                ))}\n              </TextField>\n              <TextField\n                required\n                id=\"newLocation\"\n                label=\"Location \"\n                className={classes.textField2}\n                value={this.state.newLocation}\n                onChange={e => this.setState({ newLocation: e.target.value })}\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n              <TextField\n                required\n                id=\"newCategory\"\n                select\n                label=\"Category\"\n                className={classes.textField2}\n                value={this.state.newCategory}\n                onChange={e => this.setState({ newCategory: e.target.value })}\n                //helperText=\"Please select your currency\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                SelectProps={{\n                  MenuProps: {\n                    className: classes.menu\n                  }\n                }}\n              >\n                {categories.map(option => (\n                  <MenuItem key={option.value} value={option.value}>\n                    {option.label}\n                  </MenuItem>\n                ))}\n              </TextField>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={this.handleClose} color=\"primary\">\n                Cancel\n              </Button>\n              <Button\n                onClick={() => {\n                  this.onSubmit(\n                    //this.state.title,\n                    this.state.newBillType,\n                    this.state.newClientType,\n                    this.state.newClient,\n                    this.state.thereapist,\n                    this.state.newLocation,\n                    this.state.newCategory\n                  );\n                  this.handleClose();\n                }}\n                color=\"primary\"\n              >\n                Save & Close\n              </Button>\n            </DialogActions>\n          </form>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nReactCalendarBase.propTypes = propTypes;\n\n//export default ReactCalendarBase;\nexport default withStyles(styles)(ReactCalendarBase);\n"]},"metadata":{},"sourceType":"module"}