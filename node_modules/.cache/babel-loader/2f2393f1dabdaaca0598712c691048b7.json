{"ast":null,"code":"var _jsxFileName = \"/Users/kenneth/repos2/mtsaas/mtrepo/src/newEventDialog2.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Button from \"@material-ui/core/Button\";\nimport axios from \"axios\";\n\nconst styles = theme => ({\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 400\n  },\n  textField2: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 192\n  },\n  dense: {\n    marginTop: 16\n  },\n  menu: {\n    width: 200\n  },\n  state: {\n    open: false,\n    openV: false\n  }\n});\n\nconst billTypes = [{\n  value: \"Billable\",\n  label: \"Billable\"\n}, {\n  value: \"Non-billable\",\n  label: \"Non-billable\"\n}];\nconst clientTypes = [{\n  value: \"Individual\",\n  label: \"Individual\"\n}, {\n  value: \"Facility\",\n  label: \"Facility\"\n}];\nconst clients = [{\n  value: \"John Smith\",\n  label: \"John Smith\"\n}, {\n  value: \"Jill Smith\",\n  label: \"Jill Smith\"\n}, {\n  value: \"Ashley Flowers\",\n  label: \"Ashley Flowers\"\n}];\nconst therapists = [{\n  value: \"Therapist 1\",\n  label: \"Therapist 1\"\n}, {\n  value: \"Harry Potter\",\n  label: \"Harry Potter\"\n}, {\n  value: \"Therapist 3\",\n  label: \"Therapist 3\"\n}];\nconst categories = [{\n  value: \"None\",\n  label: \"None\"\n}];\n\nclass OutlinedTextFields extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      //id: 0,\n      billType: null,\n      clientType: null,\n      title: null,\n      client: null,\n      therapist: null,\n      location: null,\n      category: null,\n      startDate: null,\n      startTime: null,\n      endDate: null,\n      endTime: null,\n      information: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    this.getDataFromDb = () => {\n      fetch(\"http://localhost:5000/events\").then(data => data.json()).then(res => this.setState({\n        data: res.data\n      }));\n    };\n\n    this.handleChange = name => event => {\n      this.setState({\n        [name]: event.target.value\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false\n        /*\n        //this will set the values to blank once the window is closed\n        billType: \"\",\n        clientType: \"\",\n        title: \"\",\n        client: \"\",\n        therapist: \"\",\n        location: \"\",\n        category: \"\"\n        */\n\n      });\n    };\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n\n  /*\n  putDataToDB = (title, client) => {\n    let currentIds = this.state.data.map(data => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n     axios.post(\"http://localhost:5000/api/putData\", {\n      id: idToBeAdded,\n      title: title,\n      client: client\n      //start: start,\n      //end: end,\n      //client: client,\n      //therapist: therapist\n    });\n  };\n  */\n  onSubmit(e) {\n    //e.preventDefault();\n    const obj = {\n      title: this.state.title,\n      billType: this.state.billType,\n      clientType: this.state.clientType,\n      therapist: this.state.therapist,\n      location: this.state.location,\n      category: this.state.category,\n      client: this.state.client\n    };\n    axios.post(\"http://localhost:5000/putData2\", obj).then(res => console.log(res.data));\n    /* this will clear everything after saving+closing */\n\n    /*\n    this.setState({\n      billType: \"\",\n      clientType: \"\",\n      title: \"\",\n      client: \"\",\n      therapist: \"\",\n      location: \"\",\n      category: \"\"\n    });\n    */\n  }\n\n  render() {\n    const classes = this.props.classes; // const { selectedDate } = this.state;\n\n    return React.createElement(Dialog, {\n      open: this.state.open,\n      onClose: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: classes.container,\n      noValidate: true,\n      autoComplete: \"off\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      required: true,\n      id: \"title\",\n      label: \"Title \",\n      className: classes.textField,\n      value: this.state.title,\n      onChange: e => this.setState({\n        title: e.target.value\n      }),\n      margin: \"normal\",\n      variant: \"outlined\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      required: true,\n      id: \"bill_type\",\n      select: true,\n      label: \"Bill Type\",\n      className: classes.textField,\n      value: this.state.billType,\n      onChange: e => this.setState({\n        billType: e.target.value\n      }) //helperText=\"Please select your currency\"\n      ,\n      margin: \"normal\",\n      variant: \"outlined\",\n      SelectProps: {\n        MenuProps: {\n          className: classes.menu\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, billTypes.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, option.label))), React.createElement(TextField, {\n      required: true,\n      id: \"client_type\",\n      select: true,\n      label: \"Client Type\",\n      className: classes.textField,\n      value: this.state.clientType,\n      onChange: e => this.setState({\n        clientType: e.target.value\n      }) //helperText=\"Please select your currency\"\n      ,\n      margin: \"normal\",\n      variant: \"outlined\",\n      SelectProps: {\n        MenuProps: {\n          className: classes.menu\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, clientTypes.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, option.label))), React.createElement(TextField, {\n      required: true,\n      id: \"client\",\n      select: true,\n      label: \"Client\",\n      className: classes.textField,\n      value: this.state.client,\n      onChange: e => this.setState({\n        client: e.target.value\n      }) //helperText=\"Please select your currency\"\n      ,\n      margin: \"normal\",\n      variant: \"outlined\",\n      SelectProps: {\n        MenuProps: {\n          className: classes.menu\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, clients.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, option.label))), React.createElement(TextField, {\n      required: true,\n      id: \"therapist\",\n      select: true,\n      label: \"Therapist\",\n      className: classes.textField,\n      value: this.state.therapist,\n      onChange: e => this.setState({\n        therapist: e.target.value\n      }) //helperText=\"Please select your currency\"\n      ,\n      margin: \"normal\",\n      variant: \"outlined\",\n      SelectProps: {\n        MenuProps: {\n          className: classes.menu\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, therapists.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, option.label))), React.createElement(TextField, {\n      required: true,\n      id: \"location\",\n      label: \"Location \",\n      className: classes.textField2,\n      value: this.state.location,\n      onChange: e => this.setState({\n        location: e.target.value\n      }),\n      margin: \"normal\",\n      variant: \"outlined\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      required: true,\n      id: \"category\",\n      select: true,\n      label: \"Category\",\n      className: classes.textField2,\n      value: this.state.category,\n      onChange: e => this.setState({\n        category: e.target.value\n      }) //helperText=\"Please select your currency\"\n      ,\n      margin: \"normal\",\n      variant: \"outlined\",\n      SelectProps: {\n        MenuProps: {\n          className: classes.menu\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, categories.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, option.label)))), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      onClick: () => {\n        this.onSubmit(this.state.title, this.state.billType, this.state.clientType, this.state.client, this.state.thereapist, this.state.location, this.state.category);\n        this.handleClose();\n      },\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, \"Save & Close\"))));\n  }\n\n}\n\nOutlinedTextFields.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(OutlinedTextFields);","map":{"version":3,"sources":["/Users/kenneth/repos2/mtsaas/mtrepo/src/newEventDialog2.js"],"names":["React","PropTypes","classNames","withStyles","MenuItem","TextField","DialogActions","DialogContent","Dialog","Button","axios","styles","theme","container","display","flexWrap","textField","marginLeft","spacing","marginRight","width","textField2","dense","marginTop","menu","state","open","openV","billTypes","value","label","clientTypes","clients","therapists","categories","OutlinedTextFields","Component","data","billType","clientType","title","client","therapist","location","category","startDate","startTime","endDate","endTime","information","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","handleChange","name","event","target","handleClose","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","onSubmit","e","obj","post","console","log","render","classes","props","MenuProps","className","map","option","thereapist","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport Dialog from \"@material-ui/core/Dialog\";\n\nimport Button from \"@material-ui/core/Button\";\nimport axios from \"axios\";\n\nconst styles = theme => ({\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 400\n  },\n  textField2: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 192\n  },\n  dense: {\n    marginTop: 16\n  },\n  menu: {\n    width: 200\n  },\n  state: {\n    open: false,\n    openV: false\n  }\n});\n\nconst billTypes = [\n  {\n    value: \"Billable\",\n    label: \"Billable\"\n  },\n\n  {\n    value: \"Non-billable\",\n    label: \"Non-billable\"\n  }\n];\n\nconst clientTypes = [\n  {\n    value: \"Individual\",\n    label: \"Individual\"\n  },\n\n  {\n    value: \"Facility\",\n    label: \"Facility\"\n  }\n];\n\nconst clients = [\n  {\n    value: \"John Smith\",\n    label: \"John Smith\"\n  },\n\n  {\n    value: \"Jill Smith\",\n    label: \"Jill Smith\"\n  },\n  {\n    value: \"Ashley Flowers\",\n    label: \"Ashley Flowers\"\n  }\n];\n\nconst therapists = [\n  {\n    value: \"Therapist 1\",\n    label: \"Therapist 1\"\n  },\n\n  {\n    value: \"Harry Potter\",\n    label: \"Harry Potter\"\n  },\n  {\n    value: \"Therapist 3\",\n    label: \"Therapist 3\"\n  }\n];\n\nconst categories = [\n  {\n    value: \"None\",\n    label: \"None\"\n  }\n];\n\nclass OutlinedTextFields extends React.Component {\n  state = {\n    data: [],\n    //id: 0,\n    billType: null,\n    clientType: null,\n    title: null,\n    client: null,\n    therapist: null,\n    location: null,\n    category: null,\n    startDate: null,\n    startTime: null,\n    endDate: null,\n    endTime: null,\n    information: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null\n  };\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = () => {\n    fetch(\"http://localhost:5000/events\")\n      .then(data => data.json())\n      .then(res => this.setState({ data: res.data }));\n  };\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n  /*\n  putDataToDB = (title, client) => {\n    let currentIds = this.state.data.map(data => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post(\"http://localhost:5000/api/putData\", {\n      id: idToBeAdded,\n      title: title,\n      client: client\n      //start: start,\n      //end: end,\n      //client: client,\n      //therapist: therapist\n    });\n  };\n*/\n  onSubmit(e) {\n    //e.preventDefault();\n    const obj = {\n      title: this.state.title,\n      billType: this.state.billType,\n      clientType: this.state.clientType,\n      therapist: this.state.therapist,\n      location: this.state.location,\n      category: this.state.category,\n      client: this.state.client\n    };\n    axios\n      .post(\"http://localhost:5000/putData2\", obj)\n      .then(res => console.log(res.data));\n    /* this will clear everything after saving+closing */\n    /*\n    this.setState({\n      billType: \"\",\n      clientType: \"\",\n      title: \"\",\n      client: \"\",\n      therapist: \"\",\n      location: \"\",\n      category: \"\"\n    });\n    */\n  }\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      open: false\n      /*\n      //this will set the values to blank once the window is closed\n      billType: \"\",\n      clientType: \"\",\n      title: \"\",\n      client: \"\",\n      therapist: \"\",\n      location: \"\",\n      category: \"\"\n*/\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n    // const { selectedDate } = this.state;\n\n    return (\n      <Dialog open={this.state.open} onClose={this.handleClose}>\n        <form className={classes.container} noValidate autoComplete=\"off\">\n          <DialogContent>\n            <TextField\n              required\n              id=\"title\"\n              label=\"Title \"\n              className={classes.textField}\n              value={this.state.title}\n              onChange={e => this.setState({ title: e.target.value })}\n              margin=\"normal\"\n              variant=\"outlined\"\n            />\n            <TextField\n              required\n              id=\"bill_type\"\n              select\n              label=\"Bill Type\"\n              className={classes.textField}\n              value={this.state.billType}\n              onChange={e => this.setState({ billType: e.target.value })}\n              //helperText=\"Please select your currency\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              SelectProps={{\n                MenuProps: {\n                  className: classes.menu\n                }\n              }}\n            >\n              {billTypes.map(option => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </TextField>\n\n            <TextField\n              required\n              id=\"client_type\"\n              select\n              label=\"Client Type\"\n              className={classes.textField}\n              value={this.state.clientType}\n              onChange={e => this.setState({ clientType: e.target.value })}\n              //helperText=\"Please select your currency\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              SelectProps={{\n                MenuProps: {\n                  className: classes.menu\n                }\n              }}\n            >\n              {clientTypes.map(option => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </TextField>\n            <TextField\n              required\n              id=\"client\"\n              select\n              label=\"Client\"\n              className={classes.textField}\n              value={this.state.client}\n              onChange={e => this.setState({ client: e.target.value })}\n              //helperText=\"Please select your currency\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              SelectProps={{\n                MenuProps: {\n                  className: classes.menu\n                }\n              }}\n            >\n              {clients.map(option => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </TextField>\n            <TextField\n              required\n              id=\"therapist\"\n              select\n              label=\"Therapist\"\n              className={classes.textField}\n              value={this.state.therapist}\n              onChange={e => this.setState({ therapist: e.target.value })}\n              //helperText=\"Please select your currency\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              SelectProps={{\n                MenuProps: {\n                  className: classes.menu\n                }\n              }}\n            >\n              {therapists.map(option => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </TextField>\n            <TextField\n              required\n              id=\"location\"\n              label=\"Location \"\n              className={classes.textField2}\n              value={this.state.location}\n              onChange={e => this.setState({ location: e.target.value })}\n              margin=\"normal\"\n              variant=\"outlined\"\n            />\n            <TextField\n              required\n              id=\"category\"\n              select\n              label=\"Category\"\n              className={classes.textField2}\n              value={this.state.category}\n              onChange={e => this.setState({ category: e.target.value })}\n              //helperText=\"Please select your currency\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              SelectProps={{\n                MenuProps: {\n                  className: classes.menu\n                }\n              }}\n            >\n              {categories.map(option => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </TextField>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\">\n              Cancel\n            </Button>\n            <Button\n              onClick={() => {\n                this.onSubmit(\n                  this.state.title,\n                  this.state.billType,\n                  this.state.clientType,\n                  this.state.client,\n                  this.state.thereapist,\n                  this.state.location,\n                  this.state.category\n                );\n                this.handleClose();\n              }}\n              color=\"primary\"\n            >\n              Save & Close\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    );\n  }\n}\n\nOutlinedTextFields.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(OutlinedTextFields);\n"]},"metadata":{},"sourceType":"module"}