{"ast":null,"code":"var _jsxFileName = \"/Users/kenneth/Documents/AlkinTest/mtsaas/src/selectable.js\";\nimport React from \"react\";\nimport BigCalendar from \"react-big-calendar\";\nimport events from \"./events\";\nimport moment from \"moment\"; //testd\n\nconst propTypes = {};\n\nclass Selectable extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSelect = ({\n      start,\n      end\n    }) => {\n      const title = window.prompt(\"New Event name\");\n      if (title) this.setState({\n        events: [...this.state.events, {\n          start,\n          end,\n          title\n        }]\n      });\n    };\n\n    this.state = {\n      events\n    };\n  }\n\n  render() {\n    const localizer = BigCalendar.momentLocalizer(moment);\n    return React.createElement(React.Fragment, null, React.createElement(BigCalendar, {\n      selectable: true,\n      localizer: localizer,\n      events: this.state.events,\n      defaultView: BigCalendar.Views.WEEK,\n      scrollToTime: new Date(1970, 1, 1, 6),\n      defaultDate: new Date(2015, 3, 12),\n      onSelectEvent: event => alert(event.title),\n      onSelectSlot: this.handleSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }));\n  }\n\n}\n\nSelectable.propTypes = propTypes;\nexport default Selectable;","map":{"version":3,"sources":["/Users/kenneth/Documents/AlkinTest/mtsaas/src/selectable.js"],"names":["React","BigCalendar","events","moment","propTypes","Selectable","Component","constructor","args","handleSelect","start","end","title","window","prompt","setState","state","render","localizer","momentLocalizer","Views","WEEK","Date","event","alert"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CACA;;AAEA,MAAMC,SAAS,GAAG,EAAlB;;AAEA,MAAMC,UAAN,SAAyBL,KAAK,CAACM,SAA/B,CAAyC;AACvCC,EAAAA,WAAW,CAAC,GAAGC,IAAJ,EAAU;AACnB,UAAM,GAAGA,IAAT;;AADmB,SAMrBC,YANqB,GAMN,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAD,KAAoB;AACjC,YAAMC,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,gBAAd,CAAd;AACA,UAAIF,KAAJ,EACE,KAAKG,QAAL,CAAc;AACZb,QAAAA,MAAM,EAAE,CACN,GAAG,KAAKc,KAAL,CAAWd,MADR,EAEN;AACEQ,UAAAA,KADF;AAEEC,UAAAA,GAFF;AAGEC,UAAAA;AAHF,SAFM;AADI,OAAd;AAUH,KAnBoB;;AAGnB,SAAKI,KAAL,GAAa;AAAEd,MAAAA;AAAF,KAAb;AACD;;AAiBDe,EAAAA,MAAM,GAAG;AACP,UAAMC,SAAS,GAAGjB,WAAW,CAACkB,eAAZ,CAA4BhB,MAA5B,CAAlB;AACA,WACE,0CACE,oBAAC,WAAD;AACE,MAAA,UAAU,MADZ;AAEE,MAAA,SAAS,EAAEe,SAFb;AAGE,MAAA,MAAM,EAAE,KAAKF,KAAL,CAAWd,MAHrB;AAIE,MAAA,WAAW,EAAED,WAAW,CAACmB,KAAZ,CAAkBC,IAJjC;AAKE,MAAA,YAAY,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,CALhB;AAME,MAAA,WAAW,EAAE,IAAIA,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,CANf;AAOE,MAAA,aAAa,EAAEC,KAAK,IAAIC,KAAK,CAACD,KAAK,CAACX,KAAP,CAP/B;AAQE,MAAA,YAAY,EAAE,KAAKH,YARrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAcD;;AAtCsC;;AAyCzCJ,UAAU,CAACD,SAAX,GAAuBA,SAAvB;AAEA,eAAeC,UAAf","sourcesContent":["import React from \"react\";\nimport BigCalendar from \"react-big-calendar\";\nimport events from \"./events\";\nimport moment from \"moment\";\n//testd\n\nconst propTypes = {};\n\nclass Selectable extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.state = { events };\n  }\n\n  handleSelect = ({ start, end }) => {\n    const title = window.prompt(\"New Event name\");\n    if (title)\n      this.setState({\n        events: [\n          ...this.state.events,\n          {\n            start,\n            end,\n            title\n          }\n        ]\n      });\n  };\n\n  render() {\n    const localizer = BigCalendar.momentLocalizer(moment);\n    return (\n      <>\n        <BigCalendar\n          selectable\n          localizer={localizer}\n          events={this.state.events}\n          defaultView={BigCalendar.Views.WEEK}\n          scrollToTime={new Date(1970, 1, 1, 6)}\n          defaultDate={new Date(2015, 3, 12)}\n          onSelectEvent={event => alert(event.title)}\n          onSelectSlot={this.handleSelect}\n        />\n      </>\n    );\n  }\n}\n\nSelectable.propTypes = propTypes;\n\nexport default Selectable;\n"]},"metadata":{},"sourceType":"module"}