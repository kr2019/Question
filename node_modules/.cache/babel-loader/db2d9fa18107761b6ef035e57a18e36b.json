{"ast":null,"code":"var _jsxFileName = \"/Users/kenneth/repos2/mtsaas/mtrepo/src/ReactCalendarBase.js\";\nimport React, { Component } from \"react\"; //import { render } from \"react-dom\";\n\nimport events from \"./events\";\nimport BigCalendar from \"react-big-calendar\";\nimport moment from \"moment\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport NewEventDialog from \"./newEventDialog\"; //import NewEventDialog2 from \"./newEventDialog2\";\n\nimport ExistingEventDialog from \"./existingEventDialog\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport MomentUtils from \"@date-io/moment\";\nimport { MuiPickersUtilsProvider, DatePicker, TimePicker } from \"@material-ui/pickers\";\nimport { BrowserRouter, Switch, Link, Route } from \"react-router-dom\";\nimport Home from \"./home\";\nimport axios from \"axios\";\nconst localizer = BigCalendar.momentLocalizer(moment);\nconst propTypes = {};\n\nconst styles = theme => ({\n  state: {\n    open: false,\n    openV: false\n  },\n  root: {\n    padding: theme.spacing(10, 10),\n    height: \"100%\",\n    width: \"90%\"\n  },\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 400\n  },\n  textField2: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 192\n  },\n  dense: {\n    marginTop: 16\n  },\n  menu: {\n    width: 200\n  }\n});\n\nconst navStyle = {\n  color: \"black\",\n  textDecoration: \"none\"\n};\nconst newBillTypes = [{\n  value: \"Billable\",\n  label: \"Billable\"\n}, {\n  value: \"Non-billable\",\n  label: \"Non-billable\"\n}];\nconst newClientTypes = [{\n  value: \"Individual\",\n  label: \"Individual\"\n}, {\n  value: \"Facility\",\n  label: \"Facility\"\n}];\nconst clients = [{\n  value: \"John Smith\",\n  label: \"John Smith\"\n}, {\n  value: \"Jill Smith\",\n  label: \"Jill Smith\"\n}, {\n  value: \"Ashley Flowers\",\n  label: \"Ashley Flowers\"\n}];\nconst therapists = [{\n  value: \"Therapist 1\",\n  label: \"Therapist 1\"\n}, {\n  value: \"Harry Potter\",\n  label: \"Harry Potter\"\n}, {\n  value: \"Therapist 3\",\n  label: \"Therapist 3\"\n}];\nconst categories = [{\n  value: \"None\",\n  label: \"None\"\n}];\n\nclass ReactCalendarBase extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.convertDate = date => {\n      return moment.utc(date).toDate();\n    };\n\n    this.handleClickOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false,\n        //this will set the values to blank once the window is closed\n        newBillType: \"\",\n        newClientType: \"\",\n        title: \"\",\n        newClient: \"\",\n        newTherapist: \"\",\n        newLocation: \"\",\n        newCategory: \"\",\n        selectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n        endSelectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\")\n      });\n    };\n\n    this.handleClickOpen2 = () => {\n      this.setState({\n        openV: true\n      });\n    };\n\n    this.handleClose2 = () => {\n      this.setState({\n        openV: false\n      });\n    };\n\n    this.handleChange = name => event => {\n      this.setState({\n        [name]: event.target.value\n      });\n    };\n\n    this.handleDateChangeStart = date => {\n      this.setState({\n        selectedDate: date.format(\"YYYY-MM-DD HH:mm:ss\")\n      });\n    };\n\n    this.handleDateChangeEnd = date => {\n      this.setState({\n        endSelectedDate: date.format(\"YYYY-MM-DD HH:mm:ss\")\n      });\n    };\n\n    this.state = {\n      cal_events: [//State is updated via componentDidMount\n      ],\n      data: [],\n      //id: 0,\n      newBillType: \"\",\n      newClientType: \"\",\n      // title: null,\n      newClient: \"\",\n      newTherapist: \"\",\n      newLocation: \"\",\n      newCategory: \"\",\n      newStartDate: \"\",\n      newStartTime: \"\",\n      newEndDate: \"\",\n      newEndTime: \"\",\n      information: \"\",\n      intervalIsSet: \"\",\n      idToDelete: \"\",\n      idToUpdate: \"\",\n      objectToUpdate: \"\",\n      selectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n      endSelectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\")\n    };\n  }\n\n  componentDidMount() {\n    axios.get(\"http://localhost:5000/events\").then(response => {\n      console.log(\"Got calendar data!\");\n      console.log(response.data);\n      let appointments = response.data;\n      /*\n      for (let i = 0; i < appointments.length; i++) {\n        appointments[i].start = this.convertDate(appointments[i].start);\n        appointments[i].end = this.convertDate(appointments[i].end);\n      }\n      */\n\n      this.setState({\n        cal_events: appointments\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n    /* this.getDataFromDb(); */\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n      console.log(\"Calendar interval set!\");\n    }\n  }\n\n  reloadPage(prevState) {\n    // if (this.state.location !== prevState.location) {\n    window.location.reload();\n    console.log(\"Refresh!\");\n  } //}\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n      console.log(\"Unmounted from events!\");\n    }\n  } // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n\n  /*\n  getDataFromDb = () => {\n    fetch(\"http://localhost:5000/events\")\n      .then(data => data.json())\n      .then(res => this.setState({ data: res.data }));\n  };\n  */\n\n  /*\n  componentDidUpdate(prevState) {\n    if (this.state.cal_events !== prevState.cal_events) {\n      console.log(\"Updated!\");\n    }\n  }\n  */\n  // this technically works, but it keeps \"updating\" non-stop instead of just the few times\n  // even technically works for state.data\n\n  /*\n  componentDidUpdate(prevState) {\n    if (this.state.cal_events !== prevState.cal_events) {\n      this.componentDidMount();\n      console.log(\"Updated!\");\n    }\n  }\n  */\n  // our put method that uses our backend api\n  // to create new query into our data base\n\n  /*\n  //this is being commented out because the same thing is already being done at onSubmit\n  putDataToDB = (\n    newBillType,\n    newClientType,\n    title,\n    newClient,\n    newTherapist,\n    newLocation,\n    newCategory\n  ) => {\n    let currentIds = this.state.data.map(data => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n     axios.post(\"http://localhost:5000/api/putData2\", {\n      id: idToBeAdded,\n      newBillType: newBillType,\n      newClientType: newClientType,\n      title: title,\n      newClient: newClient,\n      newTherapist: newTherapist,\n      newLocation: newLocation,\n      newCategory: newCategory\n      //start: start,\n      //end: end,\n      //newClient: newClient,\n      //newTherapist: newTherapist\n    });\n  };\n  */\n\n\n  onSubmit(e) {\n    //experiment keeping preventDefault\n    //e.preventDefault();\n    const obj = {\n      //title: this.state.title,\n      newBillType: this.state.newBillType,\n      newClientType: this.state.newClientType,\n      newTherapist: this.state.newTherapist,\n      newLocation: this.state.newLocation,\n      newCategory: this.state.newCategory,\n      newClient: this.state.newClient,\n      selectedDate: this.state.selectedDate,\n      endSelectedDate: this.state.endSelectedDate\n    };\n    axios.post(\"http://localhost:5000/putData2\", obj).then(res => console.log(res.data));\n    /* this will clear everything after saving+closing */\n\n    this.setState({\n      newBillType: \"\",\n      newClientType: \"\",\n      //title: \"\",\n      newClient: \"\",\n      newTherapist: \"\",\n      newLocation: \"\",\n      newCategory: \"\",\n      selectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n      endSelectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\")\n    });\n  }\n  /* show new event dialog box */\n\n\n  /*\n  reloadPage() {\n    window.location.reload();\n  }\n  */\n\n  /*\n  someMethod() {\n    // Force a render without state change...\n    this.forceUpdate();\n  }\n  */\n  render() {\n    const classes = this.props.classes; //const classes = withStyles();\n\n    const _this$state = this.state,\n          cal_events = _this$state.cal_events,\n          selectedDate = _this$state.selectedDate,\n          endSelectedDate = _this$state.endSelectedDate;\n    return React.createElement(\"div\", {\n      style: {\n        height: 1000\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, React.createElement(BrowserRouter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, React.createElement(BigCalendar, {\n      className: classes.root,\n      selectable: true,\n      localizer: localizer,\n      events: cal_events //events={events}\n      ,\n      views: [\"month\", \"week\", \"day\"],\n      defaultDate: new Date() //defaultView=\"week\"\n      ,\n      onSelectEvent: this.handleClickOpen2,\n      onSelectSlot: this.handleClickOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382\n      },\n      __self: this\n    }), React.createElement(Dialog, {\n      open: this.state.openV,\n      onClose: this.handleClose2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, React.createElement(ExistingEventDialog, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleClose2,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Button, {\n      onClick: this.handleClose2,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, \"Save\"), React.createElement(Button, {\n      onClick: this.handleClose2,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, \"Save & Next\"))), React.createElement(Dialog, {\n      open: this.state.open,\n      onClose: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: classes.container,\n      noValidate: true,\n      autoComplete: \"off\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      required: true,\n      id: \"bill_type\",\n      select: true,\n      label: \"Bill Type\",\n      className: classes.textField,\n      value: this.state.newBillType,\n      onChange: e => this.setState({\n        newBillType: e.target.value\n      }) //helperText=\"Please select your currency\"\n      ,\n      margin: \"normal\",\n      variant: \"outlined\",\n      SelectProps: {\n        MenuProps: {\n          className: classes.menu\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, newBillTypes.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, option.label))), React.createElement(TextField, {\n      required: true,\n      id: \"client_type\",\n      select: true,\n      label: \"Client Type\",\n      className: classes.textField,\n      value: this.state.newClientType,\n      onChange: e => this.setState({\n        newClientType: e.target.value\n      }) //helperText=\"Please select your currency\"\n      ,\n      margin: \"normal\",\n      variant: \"outlined\",\n      SelectProps: {\n        MenuProps: {\n          className: classes.menu\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }, newClientTypes.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }, option.label))), React.createElement(TextField, {\n      required: true,\n      id: \"newClient\",\n      select: true,\n      label: \"Client\",\n      className: classes.textField,\n      value: this.state.newClient,\n      onChange: e => this.setState({\n        newClient: e.target.value\n      }) //helperText=\"Please select your currency\"\n      ,\n      margin: \"normal\",\n      variant: \"outlined\",\n      SelectProps: {\n        MenuProps: {\n          className: classes.menu\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }, clients.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }, option.label))), React.createElement(TextField, {\n      required: true,\n      id: \"newTherapist\",\n      select: true,\n      label: \"Therapist\",\n      className: classes.textField,\n      value: this.state.newTherapist,\n      onChange: e => this.setState({\n        newTherapist: e.target.value\n      }) //helperText=\"Please select your currency\"\n      ,\n      margin: \"normal\",\n      variant: \"outlined\",\n      SelectProps: {\n        MenuProps: {\n          className: classes.menu\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    }, therapists.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520\n      },\n      __self: this\n    }, option.label))), React.createElement(TextField, {\n      required: true,\n      id: \"newLocation\",\n      label: \"Location \",\n      className: classes.textField2,\n      value: this.state.newLocation,\n      onChange: e => this.setState({\n        newLocation: e.target.value\n      }),\n      margin: \"normal\",\n      variant: \"outlined\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    }), React.createElement(TextField, {\n      required: true,\n      id: \"newCategory\",\n      select: true,\n      label: \"Category\",\n      className: classes.textField2,\n      value: this.state.newCategory,\n      onChange: e => this.setState({\n        newCategory: e.target.value\n      }) //helperText=\"Please select your currency\"\n      ,\n      margin: \"normal\",\n      variant: \"outlined\",\n      SelectProps: {\n        MenuProps: {\n          className: classes.menu\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, categories.map(option => React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553\n      },\n      __self: this\n    }, option.label))), React.createElement(MuiPickersUtilsProvider, {\n      utils: MomentUtils,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      className: classes.grid,\n      justify: \"space-around\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    }, React.createElement(DatePicker, {\n      margin: \"normal\",\n      label: \"Date picker\",\n      value: selectedDate,\n      onChange: this.handleDateChangeStart,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }), React.createElement(TimePicker, {\n      margin: \"normal\",\n      label: \"Time picker\",\n      value: selectedDate,\n      onChange: this.handleDateChangeStart,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }))), React.createElement(MuiPickersUtilsProvider, {\n      utils: MomentUtils,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      className: classes.grid,\n      justify: \"space-around\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }, React.createElement(DatePicker, {\n      margin: \"normal\",\n      label: \"Date picker\",\n      value: endSelectedDate,\n      onChange: this.handleDateChangeEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }), React.createElement(TimePicker, {\n      margin: \"normal\",\n      label: \"Time picker\",\n      value: endSelectedDate,\n      onChange: this.handleDateChangeEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    })))), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleClose,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601\n      },\n      __self: this\n    }, \"Cancel\"), React.createElement(Link, {\n      style: navStyle,\n      to: \"/home\",\n      onClick: () => {\n        this.onSubmit( //this.state.title,\n        this.state.newBillType, this.state.newClientType, this.state.newClient, this.state.thereapist, this.state.newLocation, this.state.newCategory, this.state.selectedDate, this.state.endSelectedDate); //this.reloadPage();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605\n      },\n      __self: this\n    }, React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623\n      },\n      __self: this\n    }, \"Save\")), React.createElement(Button, {\n      onClick: this.reloadPage,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }, \"Close\"))))));\n  }\n\n}\n\nReactCalendarBase.propTypes = propTypes; //export default ReactCalendarBase;\n\nexport default withStyles(styles)(ReactCalendarBase);","map":{"version":3,"sources":["/Users/kenneth/repos2/mtsaas/mtrepo/src/ReactCalendarBase.js"],"names":["React","Component","events","BigCalendar","moment","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Button","Grid","MenuItem","TextField","withStyles","NewEventDialog","ExistingEventDialog","MomentUtils","MuiPickersUtilsProvider","DatePicker","TimePicker","BrowserRouter","Switch","Link","Route","Home","axios","localizer","momentLocalizer","propTypes","styles","theme","state","open","openV","root","padding","spacing","height","width","container","display","flexWrap","textField","marginLeft","marginRight","textField2","dense","marginTop","menu","navStyle","color","textDecoration","newBillTypes","value","label","newClientTypes","clients","therapists","categories","ReactCalendarBase","constructor","args","convertDate","date","utc","toDate","handleClickOpen","setState","handleClose","newBillType","newClientType","title","newClient","newTherapist","newLocation","newCategory","selectedDate","format","endSelectedDate","handleClickOpen2","handleClose2","handleChange","name","event","target","handleDateChangeStart","handleDateChangeEnd","cal_events","data","newStartDate","newStartTime","newEndDate","newEndTime","information","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","componentDidMount","get","then","response","console","log","appointments","catch","error","interval","setInterval","getDataFromDb","reloadPage","prevState","window","location","reload","componentWillUnmount","clearInterval","onSubmit","e","obj","post","res","render","classes","props","Date","MenuProps","className","map","option","grid","thereapist"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n//import { render } from \"react-dom\";\nimport events from \"./events\";\nimport BigCalendar from \"react-big-calendar\";\nimport moment from \"moment\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport NewEventDialog from \"./newEventDialog\";\n//import NewEventDialog2 from \"./newEventDialog2\";\nimport ExistingEventDialog from \"./existingEventDialog\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport MomentUtils from \"@date-io/moment\";\nimport {\n  MuiPickersUtilsProvider,\n  DatePicker,\n  TimePicker\n} from \"@material-ui/pickers\";\nimport { BrowserRouter, Switch, Link, Route } from \"react-router-dom\";\nimport Home from \"./home\";\n\nimport axios from \"axios\";\n\nconst localizer = BigCalendar.momentLocalizer(moment);\nconst propTypes = {};\n\nconst styles = theme => ({\n  state: {\n    open: false,\n    openV: false\n  },\n\n  root: {\n    padding: theme.spacing(10, 10),\n    height: \"100%\",\n    width: \"90%\"\n  },\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 400\n  },\n  textField2: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 192\n  },\n  dense: {\n    marginTop: 16\n  },\n  menu: {\n    width: 200\n  }\n});\n\nconst navStyle = {\n  color: \"black\",\n  textDecoration: \"none\"\n};\n\nconst newBillTypes = [\n  {\n    value: \"Billable\",\n    label: \"Billable\"\n  },\n\n  {\n    value: \"Non-billable\",\n    label: \"Non-billable\"\n  }\n];\n\nconst newClientTypes = [\n  {\n    value: \"Individual\",\n    label: \"Individual\"\n  },\n\n  {\n    value: \"Facility\",\n    label: \"Facility\"\n  }\n];\n\nconst clients = [\n  {\n    value: \"John Smith\",\n    label: \"John Smith\"\n  },\n\n  {\n    value: \"Jill Smith\",\n    label: \"Jill Smith\"\n  },\n  {\n    value: \"Ashley Flowers\",\n    label: \"Ashley Flowers\"\n  }\n];\n\nconst therapists = [\n  {\n    value: \"Therapist 1\",\n    label: \"Therapist 1\"\n  },\n\n  {\n    value: \"Harry Potter\",\n    label: \"Harry Potter\"\n  },\n  {\n    value: \"Therapist 3\",\n    label: \"Therapist 3\"\n  }\n];\n\nconst categories = [\n  {\n    value: \"None\",\n    label: \"None\"\n  }\n];\n\nclass ReactCalendarBase extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.state = {\n      cal_events: [\n        //State is updated via componentDidMount\n      ],\n      data: [],\n      //id: 0,\n      newBillType: \"\",\n      newClientType: \"\",\n      // title: null,\n      newClient: \"\",\n      newTherapist: \"\",\n      newLocation: \"\",\n      newCategory: \"\",\n      newStartDate: \"\",\n      newStartTime: \"\",\n      newEndDate: \"\",\n      newEndTime: \"\",\n      information: \"\",\n      intervalIsSet: \"\",\n      idToDelete: \"\",\n      idToUpdate: \"\",\n      objectToUpdate: \"\",\n      selectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n      endSelectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\")\n    };\n  }\n\n  convertDate = date => {\n    return moment.utc(date).toDate();\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"http://localhost:5000/events\")\n      .then(response => {\n        console.log(\"Got calendar data!\");\n        console.log(response.data);\n        let appointments = response.data;\n        /*\n        for (let i = 0; i < appointments.length; i++) {\n          appointments[i].start = this.convertDate(appointments[i].start);\n          appointments[i].end = this.convertDate(appointments[i].end);\n        }\n*/\n        this.setState({\n          cal_events: appointments\n        });\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n\n    /* this.getDataFromDb(); */\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n      console.log(\"Calendar interval set!\");\n    }\n  }\n\n  reloadPage(prevState) {\n    // if (this.state.location !== prevState.location) {\n    window.location.reload();\n    console.log(\"Refresh!\");\n  }\n  //}\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n      console.log(\"Unmounted from events!\");\n    }\n  }\n\n  // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  /*\n  getDataFromDb = () => {\n    fetch(\"http://localhost:5000/events\")\n      .then(data => data.json())\n      .then(res => this.setState({ data: res.data }));\n  };\n  */\n  /*\n  componentDidUpdate(prevState) {\n    if (this.state.cal_events !== prevState.cal_events) {\n      console.log(\"Updated!\");\n    }\n  }\n  */\n\n  // this technically works, but it keeps \"updating\" non-stop instead of just the few times\n  // even technically works for state.data\n  /*\n  componentDidUpdate(prevState) {\n    if (this.state.cal_events !== prevState.cal_events) {\n      this.componentDidMount();\n      console.log(\"Updated!\");\n    }\n  }\n  */\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n  /*\n  //this is being commented out because the same thing is already being done at onSubmit\n  putDataToDB = (\n    newBillType,\n    newClientType,\n    title,\n    newClient,\n    newTherapist,\n    newLocation,\n    newCategory\n  ) => {\n    let currentIds = this.state.data.map(data => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post(\"http://localhost:5000/api/putData2\", {\n      id: idToBeAdded,\n      newBillType: newBillType,\n      newClientType: newClientType,\n      title: title,\n      newClient: newClient,\n      newTherapist: newTherapist,\n      newLocation: newLocation,\n      newCategory: newCategory\n      //start: start,\n      //end: end,\n      //newClient: newClient,\n      //newTherapist: newTherapist\n    });\n  };\n*/\n\n  onSubmit(e) {\n    //experiment keeping preventDefault\n    //e.preventDefault();\n\n    const obj = {\n      //title: this.state.title,\n      newBillType: this.state.newBillType,\n      newClientType: this.state.newClientType,\n      newTherapist: this.state.newTherapist,\n      newLocation: this.state.newLocation,\n      newCategory: this.state.newCategory,\n      newClient: this.state.newClient,\n      selectedDate: this.state.selectedDate,\n      endSelectedDate: this.state.endSelectedDate\n    };\n    axios\n      .post(\"http://localhost:5000/putData2\", obj)\n      .then(res => console.log(res.data));\n    /* this will clear everything after saving+closing */\n\n    this.setState({\n      newBillType: \"\",\n      newClientType: \"\",\n      //title: \"\",\n      newClient: \"\",\n      newTherapist: \"\",\n      newLocation: \"\",\n      newCategory: \"\",\n      selectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n      endSelectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\")\n    });\n  }\n\n  /* show new event dialog box */\n  handleClickOpen = () => {\n    this.setState({ open: true });\n  };\n\n  /* close new event dialog box */\n  handleClose = () => {\n    this.setState({\n      open: false,\n      //this will set the values to blank once the window is closed\n      newBillType: \"\",\n      newClientType: \"\",\n      title: \"\",\n      newClient: \"\",\n      newTherapist: \"\",\n      newLocation: \"\",\n      newCategory: \"\",\n      selectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n      endSelectedDate: moment().format(\"YYYY-MM-DD HH:mm:ss\")\n    });\n  };\n\n  /* show existing event dialog box */\n  handleClickOpen2 = () => {\n    this.setState({ openV: true });\n  };\n\n  /* close existing event dialog box */\n  handleClose2 = () => {\n    this.setState({ openV: false });\n  };\n\n  handleChange = name => event => {\n    this.setState({ [name]: event.target.value });\n  };\n\n  handleDateChangeStart = date => {\n    this.setState({ selectedDate: date.format(\"YYYY-MM-DD HH:mm:ss\") });\n  };\n\n  handleDateChangeEnd = date => {\n    this.setState({ endSelectedDate: date.format(\"YYYY-MM-DD HH:mm:ss\") });\n  };\n  /*\n  reloadPage() {\n    window.location.reload();\n  }\n  */\n\n  /*\n  someMethod() {\n    // Force a render without state change...\n    this.forceUpdate();\n  }\n  */\n\n  render() {\n    const { classes } = this.props;\n    //const classes = withStyles();\n    const { cal_events, selectedDate, endSelectedDate } = this.state;\n\n    return (\n      <div style={{ height: 1000 }}>\n        <BrowserRouter>\n          <BigCalendar\n            className={classes.root}\n            selectable\n            localizer={localizer}\n            events={cal_events}\n            //events={events}\n            views={[\"month\", \"week\", \"day\"]}\n            defaultDate={new Date()}\n            //defaultView=\"week\"\n            onSelectEvent={this.handleClickOpen2}\n            onSelectSlot={this.handleClickOpen}\n          />\n\n          {/* existing dialog */}\n          <Dialog open={this.state.openV} onClose={this.handleClose2}>\n            <DialogContent>\n              <ExistingEventDialog />\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={this.handleClose2} color=\"primary\">\n                Cancel\n              </Button>\n              <Button onClick={this.handleClose2} color=\"primary\">\n                Save\n              </Button>\n              <Button onClick={this.handleClose2} color=\"primary\">\n                Save & Next\n              </Button>\n            </DialogActions>\n          </Dialog>\n\n          <Dialog open={this.state.open} onClose={this.handleClose}>\n            <form className={classes.container} noValidate autoComplete=\"off\">\n              <DialogContent>\n                {/*\n              <TextField\n                required\n                id=\"title\"\n                label=\"Title \"\n                className={classes.textField}\n                value={this.state.title}\n                onChange={e => this.setState({ title: e.target.value })}\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n            */}\n                <TextField\n                  required\n                  id=\"bill_type\"\n                  select\n                  label=\"Bill Type\"\n                  className={classes.textField}\n                  value={this.state.newBillType}\n                  onChange={e => this.setState({ newBillType: e.target.value })}\n                  //helperText=\"Please select your currency\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  SelectProps={{\n                    MenuProps: {\n                      className: classes.menu\n                    }\n                  }}\n                >\n                  {newBillTypes.map(option => (\n                    <MenuItem key={option.value} value={option.value}>\n                      {option.label}\n                    </MenuItem>\n                  ))}\n                </TextField>\n\n                <TextField\n                  required\n                  id=\"client_type\"\n                  select\n                  label=\"Client Type\"\n                  className={classes.textField}\n                  value={this.state.newClientType}\n                  onChange={e =>\n                    this.setState({ newClientType: e.target.value })\n                  }\n                  //helperText=\"Please select your currency\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  SelectProps={{\n                    MenuProps: {\n                      className: classes.menu\n                    }\n                  }}\n                >\n                  {newClientTypes.map(option => (\n                    <MenuItem key={option.value} value={option.value}>\n                      {option.label}\n                    </MenuItem>\n                  ))}\n                </TextField>\n                <TextField\n                  required\n                  id=\"newClient\"\n                  select\n                  label=\"Client\"\n                  className={classes.textField}\n                  value={this.state.newClient}\n                  onChange={e => this.setState({ newClient: e.target.value })}\n                  //helperText=\"Please select your currency\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  SelectProps={{\n                    MenuProps: {\n                      className: classes.menu\n                    }\n                  }}\n                >\n                  {clients.map(option => (\n                    <MenuItem key={option.value} value={option.value}>\n                      {option.label}\n                    </MenuItem>\n                  ))}\n                </TextField>\n                <TextField\n                  required\n                  id=\"newTherapist\"\n                  select\n                  label=\"Therapist\"\n                  className={classes.textField}\n                  value={this.state.newTherapist}\n                  onChange={e =>\n                    this.setState({ newTherapist: e.target.value })\n                  }\n                  //helperText=\"Please select your currency\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  SelectProps={{\n                    MenuProps: {\n                      className: classes.menu\n                    }\n                  }}\n                >\n                  {therapists.map(option => (\n                    <MenuItem key={option.value} value={option.value}>\n                      {option.label}\n                    </MenuItem>\n                  ))}\n                </TextField>\n                <TextField\n                  required\n                  id=\"newLocation\"\n                  label=\"Location \"\n                  className={classes.textField2}\n                  value={this.state.newLocation}\n                  onChange={e => this.setState({ newLocation: e.target.value })}\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                />\n                <TextField\n                  required\n                  id=\"newCategory\"\n                  select\n                  label=\"Category\"\n                  className={classes.textField2}\n                  value={this.state.newCategory}\n                  onChange={e => this.setState({ newCategory: e.target.value })}\n                  //helperText=\"Please select your currency\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  SelectProps={{\n                    MenuProps: {\n                      className: classes.menu\n                    }\n                  }}\n                >\n                  {categories.map(option => (\n                    <MenuItem key={option.value} value={option.value}>\n                      {option.label}\n                    </MenuItem>\n                  ))}\n                </TextField>\n                <MuiPickersUtilsProvider utils={MomentUtils}>\n                  <Grid\n                    container\n                    className={classes.grid}\n                    justify=\"space-around\"\n                  >\n                    <DatePicker\n                      margin=\"normal\"\n                      label=\"Date picker\"\n                      value={selectedDate}\n                      onChange={this.handleDateChangeStart}\n                    />\n                    <TimePicker\n                      margin=\"normal\"\n                      label=\"Time picker\"\n                      value={selectedDate}\n                      onChange={this.handleDateChangeStart}\n                    />\n                  </Grid>\n                </MuiPickersUtilsProvider>\n                <MuiPickersUtilsProvider utils={MomentUtils}>\n                  <Grid\n                    container\n                    className={classes.grid}\n                    justify=\"space-around\"\n                  >\n                    <DatePicker\n                      margin=\"normal\"\n                      label=\"Date picker\"\n                      value={endSelectedDate}\n                      onChange={this.handleDateChangeEnd}\n                    />\n                    <TimePicker\n                      margin=\"normal\"\n                      label=\"Time picker\"\n                      value={endSelectedDate}\n                      onChange={this.handleDateChangeEnd}\n                    />\n                  </Grid>\n                </MuiPickersUtilsProvider>\n              </DialogContent>\n\n              <DialogActions>\n                <Button onClick={this.handleClose} color=\"primary\">\n                  Cancel\n                </Button>\n\n                <Link\n                  style={navStyle}\n                  to=\"/home\"\n                  onClick={() => {\n                    this.onSubmit(\n                      //this.state.title,\n                      this.state.newBillType,\n                      this.state.newClientType,\n                      this.state.newClient,\n                      this.state.thereapist,\n                      this.state.newLocation,\n                      this.state.newCategory,\n                      this.state.selectedDate,\n                      this.state.endSelectedDate\n                    );\n                    //this.reloadPage();\n                  }}\n                >\n                  <Button>Save</Button>\n                </Link>\n                <Button onClick={this.reloadPage} color=\"primary\">\n                  Close\n                </Button>\n              </DialogActions>\n            </form>\n          </Dialog>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nReactCalendarBase.propTypes = propTypes;\n\n//export default ReactCalendarBase;\nexport default withStyles(styles)(ReactCalendarBase);\n"]},"metadata":{},"sourceType":"module"}